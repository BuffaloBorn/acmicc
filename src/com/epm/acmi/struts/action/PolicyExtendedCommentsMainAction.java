/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;
import java.math.BigDecimal;
import java.rmi.RemoteException;

import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.CookieUtil;
import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.acmi.common.TextProcessing;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;
import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.PolicyExtendedCommentsMainForm;
import com.isdiary.entirex.WSExtCommentMaintCall;
import com.softwarag.extirex.webservice.extcommmaint.client.MUTXTMWINOUT_PARMS;
import com.softwarag.extirex.webservice.extcommmaint.client.holders.MUTXTMWResponseINOUT_PARMS1Holder;
import com.softwarag.extirex.webservice.extcommmaint.client.holders.MUTXTMWResponseMSG_DATAHolder;
import com.softwarag.extirex.webservice.extcommmaint.client.holders.MUTXTMWResponseOUT_PARMSHolder;

/** 
 * MyEclipse Struts
 * Creation date: 04-03-2008
 * 
 * XDoclet definition:
 * @struts.action path="/policyExtendedCommentsMainMain" name="policyExtendedCommentsMainMainForm" input="/jsp/ias/PolicyExtendedCommentsMainMain.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary.do" redirect="true"
 */
public class PolicyExtendedCommentsMainAction extends CCAction {

	private static Logger log = Logger.getLogger(PolicyExtendedCommentsMainAction.class);
	private static String classAction = "Policy Extended Comments Data";
	
	public void doExecute(ActionContext ctx) throws Exception 
	{
		log.debug("Begin execute doExecute");
		this.loadList(ctx);		
		log.debug("End execute doExecute");
	}
	
	private void loadList(ActionContext ctx) {
		String PolicyNo = null;
		String service = "Edit: " + classAction;
		
		PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		log.debug("session policyno:" + PolicyNo);
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		MUTXTMWResponseMSG_DATAHolder msgInfo = new MUTXTMWResponseMSG_DATAHolder();
		MUTXTMWResponseINOUT_PARMS1Holder inoutparms = new MUTXTMWResponseINOUT_PARMS1Holder();
		MUTXTMWResponseOUT_PARMSHolder outparms = new MUTXTMWResponseOUT_PARMSHolder();
		
		try {
			WSExtCommentMaintCall.fetch(user, PolicyNo,inoutparms,msgInfo,outparms);
			fillForm(ctx, inoutparms,  outparms);
			ctx.forwardToInput();
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardByName(Forwards.BACK);
			log.debug("Error occurred " + classAction);
		}
	}

	private void fillForm(ActionContext ctx, MUTXTMWResponseINOUT_PARMS1Holder inoutparms,	MUTXTMWResponseOUT_PARMSHolder outparms) {
		
		PolicyExtendedCommentsMainForm form =  (PolicyExtendedCommentsMainForm)ctx.form();
		
		form.clear();
		
		form.setPolicy_id(inoutparms.value.getPOLICY_ID1().toString());
		form.setDescription(inoutparms.value.getDESCRIPTION1());
		form.setFreeTextArea(TextProcessing.formatText(inoutparms.value.getTEXT1(), 60));
		form.setLog_counter(inoutparms.value.getLOG_COUNTER1().toString());
	}

	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		// in this example we go back to the jsp
		CookieUtil.setUpdateCloseAndIaspopupCookie(ctx);
		ctx.forwardByName(Forwards.BACK);
	}
	
	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void save_onClick(FormActionContext ctx) throws Exception {
		PolicyExtendedCommentsMainForm form = (PolicyExtendedCommentsMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		saveExtendedCommentsMaint(ctx);
	
		
	}
	
	private void saveExtendedCommentsMaint(FormActionContext ctx) 
	{
		String service = "Add: " + classAction;
		
		log.debug("Adding Policy Extended Comments Maint");
		
		PolicyExtendedCommentsMainForm form = (PolicyExtendedCommentsMainForm) ctx.form();
		
		String PolicyNo=null;
		
		MUTXTMWINOUT_PARMS inputs = new MUTXTMWINOUT_PARMS();
		
		retrieveForm( inputs,  PolicyNo, ctx);
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		MUTXTMWResponseMSG_DATAHolder msgInfo = new MUTXTMWResponseMSG_DATAHolder();
		MUTXTMWResponseINOUT_PARMS1Holder inoutparms = new MUTXTMWResponseINOUT_PARMS1Holder();
		MUTXTMWResponseOUT_PARMSHolder outparms = new MUTXTMWResponseOUT_PARMSHolder();
		
		try {
			WSExtCommentMaintCall.add(user, inputs,inoutparms,msgInfo,outparms);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			CookieUtil.setUpdateCloseAndIaspopupCookie(ctx);
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Adding " + classAction);
		}
		
	}

	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void edit_onClick(FormActionContext ctx) throws Exception {
		PolicyExtendedCommentsMainForm form = (PolicyExtendedCommentsMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		editExtendedCommentsMaint(ctx);
	
		
	}

	private void editExtendedCommentsMaint(FormActionContext ctx) 
	{
		String service = "Edit: " + classAction;
		
		log.debug("Editing Policy Extended Comments Maint");
		
		PolicyExtendedCommentsMainForm form = (PolicyExtendedCommentsMainForm) ctx.form();
		
		String PolicyNo=null;
		
		MUTXTMWINOUT_PARMS inputs = new MUTXTMWINOUT_PARMS();
		
		retrieveForm( inputs,  PolicyNo, ctx);
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		
		MUTXTMWResponseMSG_DATAHolder msgInfo = new MUTXTMWResponseMSG_DATAHolder();
		MUTXTMWResponseINOUT_PARMS1Holder inoutparms = new MUTXTMWResponseINOUT_PARMS1Holder();
		MUTXTMWResponseOUT_PARMSHolder outparms = new MUTXTMWResponseOUT_PARMSHolder();
		
		try {
			WSExtCommentMaintCall.edit(user, inputs,inoutparms,msgInfo,outparms);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			CookieUtil.setUpdateCloseAndIaspopupCookie(ctx);
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Editing " + classAction);
		}
		
	}

	private void retrieveForm(MUTXTMWINOUT_PARMS inputs, String policyNo , FormActionContext ctx) 
	{
		PolicyExtendedCommentsMainForm form = (PolicyExtendedCommentsMainForm) ctx.form();
		
		policyNo = form.getPolicy_id();
		
		inputs.setPOLICY_ID(new BigDecimal(form.getPolicy_id().toString()));
		inputs.setDESCRIPTION(form.getDescription());
		String[] Text = new String[191];
		
		TextProcessing.storeTextData(form.getFreeTextArea(), 0, 190, Text ,61, 0, 11460);
		inputs.setTEXT(Text);
		
		inputs.setLOG_COUNTER(new BigDecimal(form.getLog_counter()));
	}
	
	
	
}