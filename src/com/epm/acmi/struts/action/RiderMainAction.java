/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;
import java.math.BigDecimal;
import java.rmi.RemoteException;

import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.acmi.common.TextProcessing;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;
import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.RiderMainForm;
import com.isdiary.entirex.WSRiderMainCall;
import com.softwarag.extirex.webservice.ridercodes.client.ACRIDBWPDA_FIELDS;
import com.softwarag.extirex.webservice.ridermaint.client.ACPLPMWINOUT_PARM;
import com.softwarag.extirex.webservice.ridermaint.client.ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO;
import com.softwarag.extirex.webservice.ridermaint.client.ACPLPMWResponseINOUT_PARM1RIDER_INFOsRIDER_INFO1;
import com.softwarag.extirex.webservice.ridermaint.client.holders.ACPLPMWResponseINOUT_PARM1Holder;
import com.softwarag.extirex.webservice.ridermaint.client.holders.ACPLPMWResponseMSG_INFOHolder;
import com.softwarag.extirex.webservice.ridermaint.client.holders.ACPLPMWResponseOUT_PARMHolder;

/** 
 * MyEclipse Struts
 * Creation date: 04-08-2008
 * 
 * XDoclet definition:
 * @struts.action path="/iuauser/riderMain" name="riderMainForm" input="/jsp/ias/riderMainMain.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary" redirect="true"
 */
public class RiderMainAction extends CCAction {

	private static Logger log = Logger.getLogger(RiderMainAction.class);
	private static String classAction = "Rider Maintenance Data";
	
	public void doExecute(ActionContext ctx) throws Exception {
		log.debug("Begin execute doExecute");
		
		String riderCode = null; 
		
		riderCode = (String)ctx.request().getParameter("riderCode");
		String riderPos =  (String)ctx.request().getParameter("riderPos");
		
		if ( riderCode == null)
		{
			log.debug("rider Code is null");
			displayRiderMaint(ctx);
		}
		else
		{
			fillinRiderCode(ctx, riderCode, riderPos);	
		}
		
		log.debug("End execute doExecute");
	}
	
	private void fillinRiderCode(ActionContext ctx, String riderCode, String riderPos) 
	{
		RiderMainForm form = (RiderMainForm) ctx.form();
		
		if (riderPos.equalsIgnoreCase("One"))
			form.setRIDER_CODE_ONE(riderCode);
		
		if (riderPos.equalsIgnoreCase("Two"))
			form.setRIDER_CODE_TWO(riderCode);
		
		if (riderPos.equalsIgnoreCase("Three"))
			form.setRIDER_CODE_THREE(riderCode);
		
		if (riderPos.equalsIgnoreCase("Four"))
			form.setRIDER_CODE_FOUR(riderCode);
		
		if (riderPos.equalsIgnoreCase("Five"))
			form.setRIDER_CODE_FIVE(riderCode);
		
		ctx.forwardToInput();
	}

	private void displayRiderMaint(ActionContext ctx) {
		
		String service = "Display: " + classAction;
		
		String policyNo = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		log.debug("Policy Number from IASpolicyNumber:" + policyNo);
		
		String personId  = (String)ctx.request().getParameter("personid");
		
		if( personId == null) 
		{	
			ctx.forwardToInput();
			return;
		}
		
		ACPLPMWResponseINOUT_PARM1Holder inoutparms = new ACPLPMWResponseINOUT_PARM1Holder();
		ACPLPMWResponseOUT_PARMHolder outparms = new ACPLPMWResponseOUT_PARMHolder();
		ACPLPMWResponseMSG_INFOHolder msgInfo= new ACPLPMWResponseMSG_INFOHolder();
		
		try {
			WSRiderMainCall.fecth(policyNo, personId, msgInfo, inoutparms, outparms);
			fillForm(inoutparms,outparms, ctx);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + policyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",policyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + policyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",policyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + policyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",policyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("I"))
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.forwardToInput();
			log.debug("Finish....Dispalying " + classAction);
		}
		else
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
			ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
			
	}

	
	private void fillForm(ACPLPMWResponseINOUT_PARM1Holder inoutparms,	ACPLPMWResponseOUT_PARMHolder outparms, ActionContext ctx) 
	{
		RiderMainForm form = (RiderMainForm) ctx.form();
		ACRIDBWPDA_FIELDS parms = new ACRIDBWPDA_FIELDS();
		
		
		String personstatus = (String)ctx.request().getParameter("personstatus");
		String persondate =  (String)ctx.request().getParameter("persondate");
		
		if ((personstatus == null) && (persondate==null))
		{	
			ACRIDBWPDA_FIELDS localParms = (ACRIDBWPDA_FIELDS) ctx.session().getAttribute("riderCodesParms");
			personstatus = localParms.getPDA_PERSON_STATUS();
			persondate = localParms.getPDA_PERSON_DATE();
		}
		

		form.setPERSON_ID(inoutparms.value.getPERSON_ID1().toString());
		form.setPOLICY_ID(inoutparms.value.getPOLICY_ID1().toString());
		
	
		form.setRIDER_FLAG(inoutparms.value.getRIDER_FLAG1());
		
		form.setINSURED_SEARCH_NAME(outparms.value.getINSURED_SEARCH_NAME());
		form.setKEY_INSURED_SEARCH_NAME(outparms.value.getKEY_INSURED_SEARCH_NAME());
		form.setPRODUCT_CODE(outparms.value.getPRODUCT_CODE());
		
		ACPLPMWResponseINOUT_PARM1RIDER_INFOsRIDER_INFO1[] RIDER_INFO = inoutparms.value.getRIDER_INFOs();
		
		form.setRIDER_CODE_ONE(RIDER_INFO[0].getRIDER_CODE1());
		form.setRIDER_DESCRIPTION_ONE(RIDER_INFO[0].getRIDER_DESCRIPTION1());
	    form.setRID_TIME_PERIOD_ONE(RIDER_INFO[0].getRID_TIME_PERIOD1().toString());
		form.setRIDER_START_DATE_ONE(TextProcessing.dateFormat(RIDER_INFO[0].getRIDER_START_DATE1()));
		form.setRIDER_END_DATE_ONE(TextProcessing.dateFormat(RIDER_INFO[0].getRIDER_END_DATE1().toString()));
		form.setRIDER_TEXT_ONE(TextProcessing.formatRiderText(RIDER_INFO[0].getRIDER_TEXT1()));
		
		if(form.getRIDER_TEXT_ONE().trim().length() != 0)
		{
			ctx.request().setAttribute("textrequired", "Y");
			ctx.request().setAttribute("riderPos", "One");
		}
		
		form.setRIDER_CODE_TWO(RIDER_INFO[1].getRIDER_CODE1());
		form.setRIDER_DESCRIPTION_TWO(RIDER_INFO[1].getRIDER_DESCRIPTION1());
	    form.setRID_TIME_PERIOD_TWO(RIDER_INFO[1].getRID_TIME_PERIOD1().toString());
		form.setRIDER_START_DATE_TWO(TextProcessing.dateFormat(RIDER_INFO[1].getRIDER_START_DATE1()));
		form.setRIDER_END_DATE_TWO(TextProcessing.dateFormat(RIDER_INFO[1].getRIDER_END_DATE1().toString()));
		form.setRIDER_TEXT_TWO(TextProcessing.formatRiderText(RIDER_INFO[1].getRIDER_TEXT1()));
		
		if(form.getRIDER_TEXT_TWO().trim().length() != 0)
		{
			ctx.request().setAttribute("textrequired", "Y");
			ctx.request().setAttribute("riderPos", "Two");
		}
		
		form.setRIDER_CODE_THREE(RIDER_INFO[2].getRIDER_CODE1());
		form.setRIDER_DESCRIPTION_THREE(RIDER_INFO[2].getRIDER_DESCRIPTION1());
	    form.setRID_TIME_PERIOD_THREE(RIDER_INFO[2].getRID_TIME_PERIOD1().toString());
		form.setRIDER_START_DATE_THREE(TextProcessing.dateFormat(RIDER_INFO[2].getRIDER_START_DATE1()));
		form.setRIDER_END_DATE_THREE(TextProcessing.dateFormat(RIDER_INFO[2].getRIDER_END_DATE1().toString()));
		form.setRIDER_TEXT_THREE(TextProcessing.formatRiderText(RIDER_INFO[2].getRIDER_TEXT1()));
		
		if(form.getRIDER_TEXT_THREE().trim().length() != 0)
		{
			ctx.request().setAttribute("textrequired", "Y");
			ctx.request().setAttribute("riderPos", "Three");
		}
		
		form.setRIDER_CODE_FOUR(RIDER_INFO[3].getRIDER_CODE1());
		form.setRIDER_DESCRIPTION_FOUR(RIDER_INFO[3].getRIDER_DESCRIPTION1());
	    form.setRID_TIME_PERIOD_FOUR(RIDER_INFO[3].getRID_TIME_PERIOD1().toString());
		form.setRIDER_START_DATE_FOUR(TextProcessing.dateFormat(RIDER_INFO[3].getRIDER_START_DATE1()));
		form.setRIDER_END_DATE_FOUR(TextProcessing.dateFormat(RIDER_INFO[3].getRIDER_END_DATE1().toString()));
		form.setRIDER_TEXT_FOUR(TextProcessing.formatRiderText(RIDER_INFO[3].getRIDER_TEXT1()));
		
		if(form.getRIDER_TEXT_FOUR().trim().length() != 0)
		{
			ctx.request().setAttribute("textrequired", "Y");
			ctx.request().setAttribute("riderPos", "Four");
		}
		
		form.setRIDER_CODE_FIVE(RIDER_INFO[4].getRIDER_CODE1());
		form.setRIDER_DESCRIPTION_FIVE(RIDER_INFO[4].getRIDER_DESCRIPTION1());
	    form.setRID_TIME_PERIOD_FIVE(RIDER_INFO[4].getRID_TIME_PERIOD1().toString());
		form.setRIDER_START_DATE_FIVE(TextProcessing.dateFormat(RIDER_INFO[4].getRIDER_START_DATE1()));
		form.setRIDER_END_DATE_FIVE(TextProcessing.dateFormat(RIDER_INFO[4].getRIDER_END_DATE1().toString()));
		form.setRIDER_TEXT_FIVE(TextProcessing.formatRiderText(RIDER_INFO[4].getRIDER_TEXT1()));
		
		if(form.getRIDER_TEXT_FIVE().trim().length() != 0)
		{
			ctx.request().setAttribute("textrequired", "Y");
			ctx.request().setAttribute("riderPos", "Five");
		}
		
		form.setSTATE(outparms.value.getSTATE_CODE());

		parms.setPDA_PERSON_DATE(persondate);
		parms.setPDA_PERSON_STATUS(personstatus);
		parms.setPDA_STATE(form.getSTATE());
		
		form.setLog_counter(inoutparms.value.getLOG_COUNTER1().toString());
		
		ctx.session().setAttribute("riderCodesParms",parms);
	}

	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.clear();
		
		String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
		ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
		
		ctx.forwardByName(Forwards.BACK);
	}
	
	/**
	 * This method is called if the edit button is clicked
	 * @param ctx The FormActionContext
	 */
	public void edit_onClick(FormActionContext ctx) throws Exception 
	{
		RiderMainForm form = (RiderMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		editRiderMaint(ctx);

	}
	
	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void save_onClick(FormActionContext ctx) throws Exception 
	{
		RiderMainForm form = (RiderMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		addRiderMaint(ctx);
	}

	private void addRiderMaint(FormActionContext ctx)
	{
		String service = "Add: " + classAction;
		RiderMainForm form = (RiderMainForm) ctx.form();
		
		String PolicyNo = null;
	
		ACPLPMWResponseINOUT_PARM1Holder inoutparms = new ACPLPMWResponseINOUT_PARM1Holder();
		ACPLPMWResponseOUT_PARMHolder outparms = new ACPLPMWResponseOUT_PARMHolder();
		ACPLPMWResponseMSG_INFOHolder msgInfo= new ACPLPMWResponseMSG_INFOHolder();
		
		ACPLPMWINOUT_PARM inputs = new ACPLPMWINOUT_PARM();
		
		form.save();
		
		retrieveEditForm( inputs, PolicyNo  ,  ctx);
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		try {
			WSRiderMainCall.add(user, inputs, msgInfo, inoutparms, outparms);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
			ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Adding " + classAction);
		}
		
	}

	private void editRiderMaint(FormActionContext ctx) 
	{
		String service = "Edit: " + classAction;
		RiderMainForm form = (RiderMainForm) ctx.form();
		
		String PolicyNo = null;
	
		ACPLPMWResponseINOUT_PARM1Holder inoutparms = new ACPLPMWResponseINOUT_PARM1Holder();
		ACPLPMWResponseOUT_PARMHolder outparms = new ACPLPMWResponseOUT_PARMHolder();
		ACPLPMWResponseMSG_INFOHolder msgInfo= new ACPLPMWResponseMSG_INFOHolder();
		
		ACPLPMWINOUT_PARM inputs = new ACPLPMWINOUT_PARM();
		
		form.save();
		
		retrieveEditForm( inputs, PolicyNo  ,  ctx);
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		try {
			WSRiderMainCall.edit(user, inputs, msgInfo, inoutparms, outparms);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardByName("riderEditError");
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + msgInfo.value.getMESSAGE_TEXT());
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, msgInfo.value.getMESSAGE_TEXT());
			String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
			ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Editing " + classAction);
		}
	}

	private void retrieveEditForm(ACPLPMWINOUT_PARM inputs, String policyNo,FormActionContext ctx) 
	{
		RiderMainForm form = (RiderMainForm) ctx.form();
		
		policyNo = form.getPOLICY_ID();
		

		inputs.setPERSON_ID(new BigDecimal(form.getPERSON_ID()));
		
		inputs.setPOLICY_ID(new BigDecimal(policyNo));
		inputs.setRIDER_FLAG(form.getRIDER_FLAG());
		inputs.setLOG_COUNTER(new BigDecimal(form.getLog_counter()));
		
		ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO[] RIDER_INFOs = new ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO[5];
		
		ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO RIDER_INFO1 = new ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO();
		ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO RIDER_INFO2 = new ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO();
		ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO RIDER_INFO3 = new ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO();
		ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO RIDER_INFO4 = new ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO();
		ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO RIDER_INFO5 = new ACPLPMWINOUT_PARMRIDER_INFOsRIDER_INFO();
		
		
		RIDER_INFO1.setRID_TIME_PERIOD(form.getRID_TIME_PERIOD_ONE());
		RIDER_INFO1.setRIDER_CODE(form.getRIDER_CODE_ONE());
		RIDER_INFO1.setRIDER_DESCRIPTION(form.getRIDER_DESCRIPTION_ONE());
		
		if(form.getRIDER_END_DATE_ONE().trim().length() == 0) 
			RIDER_INFO1.setRIDER_END_DATE("");
		else
			RIDER_INFO1.setRIDER_END_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_END_DATE_ONE()));
		
		if(form.getRIDER_START_DATE_ONE().trim().length()==0)
			RIDER_INFO1.setRIDER_START_DATE("");
		else
			RIDER_INFO1.setRIDER_START_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_START_DATE_ONE()));
		
		String[] RIDER_TEXT1 = new String[5]; 
		TextProcessing.storeTextData(form.getRIDER_TEXT_ONE(), 0, 4, RIDER_TEXT1 , 51, 0, 250);
		RIDER_INFO1.setRIDER_TEXT(RIDER_TEXT1);
		
		
		RIDER_INFO2.setRID_TIME_PERIOD(form.getRID_TIME_PERIOD_TWO());
		RIDER_INFO2.setRIDER_CODE(form.getRIDER_CODE_TWO());
		RIDER_INFO2.setRIDER_DESCRIPTION(form.getRIDER_DESCRIPTION_TWO());
		
		if(form.getRIDER_END_DATE_TWO().trim().length() == 0)
			RIDER_INFO2.setRIDER_END_DATE("");
		else
			RIDER_INFO2.setRIDER_END_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_END_DATE_TWO()));
		
		if(form.getRIDER_START_DATE_TWO().trim().length() == 0)
			RIDER_INFO2.setRIDER_START_DATE("");
		else
			RIDER_INFO2.setRIDER_START_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_START_DATE_TWO()));
		
	
		String[] RIDER_TEXT2 = new String[5];
		TextProcessing.storeTextData(form.getRIDER_TEXT_TWO(), 0, 4, RIDER_TEXT2 , 51, 0, 250);
		RIDER_INFO2.setRIDER_TEXT(RIDER_TEXT2);
	
		
		RIDER_INFO3.setRID_TIME_PERIOD(form.getRID_TIME_PERIOD_THREE());
		RIDER_INFO3.setRIDER_CODE(form.getRIDER_CODE_THREE());
		RIDER_INFO3.setRIDER_DESCRIPTION(form.getRIDER_DESCRIPTION_THREE());
		
		if(form.getRIDER_END_DATE_THREE().trim().length() == 0)
		    RIDER_INFO3.setRIDER_END_DATE("");
		else
			RIDER_INFO3.setRIDER_END_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_END_DATE_THREE()));
		
		if (form.getRIDER_START_DATE_THREE().trim().length() == 0)
			RIDER_INFO3.setRIDER_START_DATE("");
		else
			RIDER_INFO3.setRIDER_START_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_START_DATE_THREE()));
		
		String[] RIDER_TEXT3 = new String[5];
		TextProcessing.storeTextData(form.getRIDER_TEXT_THREE(), 0, 4, RIDER_TEXT3 , 51, 0, 250);
		RIDER_INFO3.setRIDER_TEXT(RIDER_TEXT3);
		
		
		RIDER_INFO4.setRID_TIME_PERIOD(form.getRID_TIME_PERIOD_FOUR());
		RIDER_INFO4.setRIDER_CODE(form.getRIDER_CODE_FOUR());
		RIDER_INFO4.setRIDER_DESCRIPTION(form.getRIDER_DESCRIPTION_FOUR());
		
		if(form.getRIDER_END_DATE_FOUR().trim().length() == 0)
			RIDER_INFO4.setRIDER_END_DATE("");
		else
			RIDER_INFO4.setRIDER_END_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_END_DATE_FOUR()));
		
		if(form.getRIDER_START_DATE_FOUR().trim().length() == 0)
			RIDER_INFO4.setRIDER_START_DATE("");
		else
			RIDER_INFO4.setRIDER_START_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_START_DATE_FOUR()));
		
		
		String[] RIDER_TEXT4 = new String[5];
		TextProcessing.storeTextData(form.getRIDER_TEXT_FOUR(), 0, 4, RIDER_TEXT4 , 51, 0, 250);
		RIDER_INFO4.setRIDER_TEXT(RIDER_TEXT4);
		
		RIDER_INFO5.setRID_TIME_PERIOD(form.getRID_TIME_PERIOD_FIVE());
		RIDER_INFO5.setRIDER_CODE(form.getRIDER_CODE_FIVE());
		RIDER_INFO5.setRIDER_DESCRIPTION(form.getRIDER_DESCRIPTION_FIVE());
		
		if (form.getRIDER_END_DATE_FIVE().trim().length() == 0)
			RIDER_INFO5.setRIDER_END_DATE("");
		else
			RIDER_INFO5.setRIDER_END_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_END_DATE_FIVE()));
		
		if(form.getRIDER_START_DATE_FIVE().trim().length() == 0)
			RIDER_INFO5.setRIDER_START_DATE("");
		else
			RIDER_INFO5.setRIDER_START_DATE(TextProcessing.YYYYMMDDFormat(form.getRIDER_START_DATE_FIVE()));
		
		String[] RIDER_TEXT5 = new String[5];
		TextProcessing.storeTextData(form.getRIDER_TEXT_FIVE(), 0, 4, RIDER_TEXT5 , 51, 0, 250);
		RIDER_INFO5.setRIDER_TEXT(RIDER_TEXT5);
		
		RIDER_INFOs[0] = RIDER_INFO1;
		RIDER_INFOs[1] = RIDER_INFO2;
		RIDER_INFOs[2] = RIDER_INFO3;
		RIDER_INFOs[3] = RIDER_INFO4;
		RIDER_INFOs[4] = RIDER_INFO5;
		
		
		inputs.setRIDER_INFOs(RIDER_INFOs);
		
	}
	
	public void riderOneHelpCreate_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "One";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "create");
		ctx.forwardByName("riderHelpCreate", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderOneHelpEdit_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "One";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "edit");
		ctx.forwardByName("riderHelpEdit", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderTwoHelpCreate_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Two";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "create");
		ctx.forwardByName("riderHelpCreate", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderTwoHelpEdit_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Two";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "edit");
		ctx.forwardByName("riderHelpEdit", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderThreeHelpCreate_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Three";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "create");
		ctx.forwardByName("riderHelpCreate", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderThreeHelpEdit_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Three";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "edit");
		ctx.forwardByName("riderHelpEdit", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderFourHelpCreate_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Four";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "create");
		ctx.forwardByName("riderHelpCreate", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderFourHelpEdit_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Four";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "edit");
		ctx.forwardByName("riderHelpEdit", riderPos, form.getPERSON_ID(), form.getSTATE());
	}
	
	public void riderFiveHelpCreate_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Five";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "create");
		ctx.forwardByName("riderHelpCreate", riderPos, form.getPERSON_ID());
	}
	
	public void riderFiveHelpEdit_onClick(FormActionContext ctx) throws Exception {
		
		String riderPos = "Five";
		RiderMainForm form = (RiderMainForm) ctx.form();
		form.save();
		ctx.session().setAttribute("riderPos",riderPos );
		ctx.session().setAttribute("personid",form.getPERSON_ID());
		ctx.session().setAttribute("actionstatus", "edit");
		ctx.forwardByName("riderHelpEdit", riderPos, form.getPERSON_ID());
	}
}
