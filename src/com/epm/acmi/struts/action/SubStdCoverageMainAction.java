/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;

import java.math.BigDecimal;
import java.rmi.RemoteException;

import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.TextProcessing;
import com.cc.acmi.presentation.dsp.ConditionCodeDsp;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;
import com.cc.framework.ui.control.SimpleListControl;
import com.epm.acmi.bean.ConditionCode;
import com.epm.acmi.datamodel.ConditionCodesDisplayList;
import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.SubStdCoverageMainForm;
import com.epm.acmi.util.ACMICache;
import com.isdiary.entirex.WSPolicyPersonCovMainCall;
import com.softwarag.extirex.webservice.policypersoncovmaint.client.IAPPCMWINOUT_PARM;
import com.softwarag.extirex.webservice.policypersoncovmaint.client.holders.IAPPCMWResponseINOUT_PARM1Holder;
import com.softwarag.extirex.webservice.policypersoncovmaint.client.holders.IAPPCMWResponseMESSAGE_INFOHolder;
import com.softwarag.extirex.webservice.policypersoncovmaint.client.holders.IAPPCMWResponseOUT_PARMHolder;

/** 
 * MyEclipse Struts
 * Creation date: 04-08-2008
 * 
 * XDoclet definition:
 * @struts.action path="/iuauser/subStdCoverageMain" name="subStdCoverageMainForm" input="/jsp/ias/SubStdCoverageMainMin.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary.do" redirect="true"
 */
public class SubStdCoverageMainAction extends CCAction {

	private static Logger log = Logger.getLogger(SubStdCoverageMainAction.class);
	private static String classAction = "Sub Standard Coverage Data";
	String personid = null;
	String coveragecode =null;
	String fillform =null;
	String displaydate = null;
	String modify  = null;
	
	public void doExecute(ActionContext ctx) throws Exception 
	{
		fillform  = (String)ctx.request().getParameter("fillform");
		
		if(fillform != null)
		{
			if (fillform.equalsIgnoreCase("true"))
			{
				log.debug("Begin execute doExecute: loadList");
				this.loadList(ctx);
				log.debug("End execute doExecute: loadList");
			}
			else
			{
				log.debug("End resetting Sub Standard Codes ");
				ctx.forwardToInput();
			}
		}
		else
		{
			log.debug("Begin execute doExecute: Get Selected Option and Load Text Data");
			this.loadSelectText(ctx);
			log.debug("End execute doExecute: Get Selected Option and Load Text Data");
		}
	}

	private void loadList(ActionContext ctx) 
	{
		
		String service = "Display: " + classAction;
		String PolicyNo = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		log.debug("Policy Number from IASpolicyNumber:" + PolicyNo);
		personid = null; 
		coveragecode =null;
		displaydate = null;
		
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		personid  = (String)ctx.request().getParameter("personid");
		coveragecode = (String)ctx.request().getParameter("coveragecode");
		displaydate = (String)ctx.request().getParameter("displaydate");
		
		
		IAPPCMWResponseINOUT_PARM1Holder inoutparms = new IAPPCMWResponseINOUT_PARM1Holder();
		IAPPCMWResponseOUT_PARMHolder outparms = new IAPPCMWResponseOUT_PARMHolder();
		IAPPCMWResponseMESSAGE_INFOHolder msgInfo = new IAPPCMWResponseMESSAGE_INFOHolder();
		
		try {
			WSPolicyPersonCovMainCall.fetch(PolicyNo , user, personid , coveragecode, displaydate,msgInfo, inoutparms, outparms);
			loadForm(ctx,inoutparms, outparms  );
			ctx.forwardToInput();
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
	}

	private void loadSelectText(ActionContext ctx) 
	{
		SimpleListControl conditionCodeList = (SimpleListControl) ctx.session().getAttribute("conditionCodeList");
		ConditionCodesDisplayList ConditionDspData = (ConditionCodesDisplayList)conditionCodeList.getDataModel();
		ConditionCodeDsp[] conditionCodeData = ConditionDspData.getData();
		
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
		
		int cc = ConditionDspData.getIndex(form.getCurrentPosition().toString());

		ConditionCodeDsp item = (ConditionCodeDsp) ACMICache.getConditionCodesExtendedFields().get(conditionCodeData[cc].getCODE().toString());
		
		if (item != null)
		{
			conditionCodeData[cc].setDESCRIPTION_REQUIRED_IND(item.getDESCRIPTION_REQUIRED_IND());
			if (item.getDESCRIPTION_REQUIRED_IND().equalsIgnoreCase("y"))
				conditionCodeData[cc].setDESCRIPTION("");
			else
				conditionCodeData[cc].setDESCRIPTION( item.getDESCRIPTION());
			
		}
		else
		{
			conditionCodeData[cc].setDESCRIPTION_REQUIRED_IND("");
			conditionCodeData[cc].setDESCRIPTION( "");
			
		}
			 
		ConditionDspData.setData(conditionCodeData);
		conditionCodeList.setDataModel(ConditionDspData);
		ctx.request().setAttribute("gIasChangesWereMade", "true");
		ctx.session().setAttribute("conditionCodeList", conditionCodeList);
		ctx.forwardToInput();
	}
	
	private void restSelectText(ActionContext ctx) 
	{
		SimpleListControl conditionCodeList = (SimpleListControl) ctx.session().getAttribute("conditionCodeList");
		ConditionCodesDisplayList ConditionDspData = (ConditionCodesDisplayList)conditionCodeList.getDataModel();
		ConditionCodeDsp[] conditionCodeData = ConditionDspData.getData();
		  
		for(int cc=0; cc < conditionCodeData.length; cc++)
		{
			conditionCodeData[cc].setDESCRIPTION_REQUIRED_IND("");
			conditionCodeData[cc].setDESCRIPTION("");
			conditionCodeData[cc].setCODE("");
			
		}
		 
		ConditionDspData.setData(conditionCodeData);
		conditionCodeList.setDataModel(ConditionDspData);
		ctx.session().setAttribute("conditionCodeList", conditionCodeList);
	}
	
	private void loadForm(ActionContext ctx,IAPPCMWResponseINOUT_PARM1Holder inoutparms, IAPPCMWResponseOUT_PARMHolder outparms) 
	{
			SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
		
			form.setPOLICY_ID(inoutparms.value.getPOLICY_ID1().toString());
		
			form.setPERSON_ID(inoutparms.value.getPERSON_ID1().toString());
		
			form.setCOVERAGE_CODE(inoutparms.value.getCOVERAGE_CODE1());
			
			form.setLog_counter(inoutparms.value.getLOG_COUNTER1().toString());
		
			if (inoutparms.value.getSUB_STANDARD_RISK_CODE1().trim().length() == 0 )
				form.setSUB_STANDARD_RISK_CODE("");
			else	
				form.setSUB_STANDARD_RISK_CODE((String) ACMICache.getSubStandardReasonCodeToSortLookup().get(inoutparms.value.getSUB_STANDARD_RISK_CODE1()));
			
			//form.setSUB_STANDARD_RISK_CODE(inoutparms.value.getSUB_STANDARD_RISK_CODE1());
		
			String[] CONDITION_CODE = inoutparms.value.getCONDITION_CODE1();
			String[] CONDITION_TEXT = inoutparms.value.getCONDITION_TEXT1();

			form.setSS_CCODE_TIME_PERIOD(inoutparms.value.getSS_CCODE_TIME_PERIOD1());
		
			ConditionCodesDisplayList ConditionDspData = ConditionCode.loadList(CONDITION_CODE, CONDITION_TEXT);
			
			SimpleListControl conditionCodeList = new SimpleListControl();
			
			conditionCodeList.setDataModel(ConditionDspData);
			ctx.session().setAttribute("conditionCodeList", conditionCodeList);
			
			if (inoutparms.value.getSUB_EFF_DATE1().toString().equalsIgnoreCase("0"))
				form.setSUB_EFF_DATE("");
			else
				form.setSUB_EFF_DATE(TextProcessing.dateFormat(inoutparms.value.getSUB_EFF_DATE1().toString()));
		
			form.setPOLICY_STATUS(outparms.value.getPOLICY_STATUS());
		
			form.setPERSON_STATUS(outparms.value.getPERSON_STATUS());
		
			form.setSTATUS_EFF_DATE(TextProcessing.dateFormat(outparms.value.getSTATUS_EFF_DATE()));
		
			form.setPERSON_STATUS_EFF_DATE(TextProcessing.dateFormat(outparms.value.getPERSON_STATUS_EFF_DATE()));
		
			form.setPERSON_NAME(outparms.value.getPERSON_NAME());
		
			form.setNEXT_DUE_DATE(TextProcessing.dateFormat(outparms.value.getNEXT_DUE_DATE()));
		
			form.setDISPLAY_DATE(TextProcessing.dateFormat(inoutparms.value.getDISPLAY_DATE1()));
		
			form.setSUB_EXT_DATE(TextProcessing.dateFormat(outparms.value.getSUB_EXT_DATE()));
		
			form.setREQ_EFF_DATE(TextProcessing.dateFormat(outparms.value.getREQ_EFF_DATE()));
		
			form.setMODE(outparms.value.getMODE());
		
			form.setPOLICY_ISSUED(outparms.value.getPOLICY_ISSUED());
			form.save();
			
			
	}
	
	public void subStdCoverageHelp_onClick(FormActionContext ctx) throws Exception {
		
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
		form.save();
	}
	
	public void resetSudStdCodes_onClick(FormActionContext ctx) throws Exception 
	{
		log.debug("Begin resetting Sub Standard Codes ");
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
		form.clearStdStandardCodes();
		restSelectText(ctx);
		resetSubStdCoverageMaint(ctx);
		
		log.debug("Begin resetting Sub Standard Codes ");
	}
	
	public void back_onClick(FormActionContext ctx) throws Exception 
	{
		
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
	
		ctx.forwardByName("coverageEdit", form.getPERSON_ID());
		
		form.clear();
		
	}
	
	
	public void edit_onClick(FormActionContext ctx) throws Exception 
	{
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
	
		editSubStdCoverageMaint(ctx);
		
	}

	private void editSubStdCoverageMaint(FormActionContext ctx) 
	{
		String service = "Edit: " + classAction;
		String PolicyNo = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
	
		IAPPCMWResponseINOUT_PARM1Holder inoutparms = new IAPPCMWResponseINOUT_PARM1Holder();
		IAPPCMWResponseOUT_PARMHolder outparms = new IAPPCMWResponseOUT_PARMHolder();
		IAPPCMWResponseMESSAGE_INFOHolder msgInfo = new IAPPCMWResponseMESSAGE_INFOHolder();
		
		IAPPCMWINOUT_PARM inputs = new IAPPCMWINOUT_PARM();
		
		retrieveForm( inputs, PolicyNo ,  ctx);
		
		
		try {
			
			WSPolicyPersonCovMainCall.update(inputs, msgInfo, inoutparms, outparms);
		
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.forwardByName("coverageEdit", form.getPERSON_ID());
			form.clear();	
			log.debug("Finish....Editing " + classAction);
		}
	}
	
	private void resetSubStdCoverageMaint(FormActionContext ctx) 
	{
		String service = "Reset: " + classAction;
		String PolicyNo = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
	
		IAPPCMWResponseINOUT_PARM1Holder inoutparms = new IAPPCMWResponseINOUT_PARM1Holder();
		IAPPCMWResponseOUT_PARMHolder outparms = new IAPPCMWResponseOUT_PARMHolder();
		IAPPCMWResponseMESSAGE_INFOHolder msgInfo = new IAPPCMWResponseMESSAGE_INFOHolder();
		
		IAPPCMWINOUT_PARM inputs = new IAPPCMWINOUT_PARM();
		
		retrieveForm( inputs, PolicyNo ,  ctx);
		
		try {
			
			WSPolicyPersonCovMainCall.update(inputs, msgInfo, inoutparms, outparms);
		
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			//ctx.forwardByName("subStdCoverage",form.getPERSON_ID(), form.getCOVERAGE_CODE() );
			ctx.forwardByName("coverageEdit", form.getPERSON_ID());
			log.debug("Finish....resetting " + classAction);
		}
	}

	private void retrieveForm(IAPPCMWINOUT_PARM inputs, String policyNo,FormActionContext ctx) 
	{
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		SubStdCoverageMainForm form = (SubStdCoverageMainForm) ctx.form();
		
		String[] CONDITION_CODE = new String[4];
		String[] CONDITION_TEXT = new String[4];
		
		policyNo = form.getPOLICY_ID();
		
		inputs.setCOVERAGE_CODE(form.getCOVERAGE_CODE());
		inputs.setPERSON_ID(new BigDecimal(form.getPERSON_ID()));
		inputs.setPOLICY_ID(new BigDecimal(form.getPOLICY_ID()));
		inputs.setSS_CCODE_TIME_PERIOD(form.getSS_CCODE_TIME_PERIOD());
		inputs.setSUB_EFF_DATE(new BigDecimal(TextProcessing.YYYYMMDDFormat(form.getSUB_EFF_DATE())));
		inputs.setDISPLAY_DATE(TextProcessing.YYYYMMDDFormat(form.getDISPLAY_DATE()));
		inputs.setLOG_COUNTER(new BigDecimal(form.getLog_counter()));
		
		if (form.getSUB_STANDARD_RISK_CODE().trim().length() == 0)
			inputs.setSUB_STANDARD_RISK_CODE("");
		else
			inputs.setSUB_STANDARD_RISK_CODE((String) ACMICache.getSubStandardReasonLookup().get(form.getSUB_STANDARD_RISK_CODE()));
		
		inputs.setUSER_ID(user);
	
		
		SimpleListControl conditionCodeList = (SimpleListControl) ctx.session().getAttribute("conditionCodeList");
		ConditionCodesDisplayList ConditionDspData = (ConditionCodesDisplayList)conditionCodeList.getDataModel();
		ConditionCodeDsp[] conditionCodeData = ConditionDspData.getData();
		  
		CONDITION_CODE[0] = conditionCodeData[0].getCODE();
		CONDITION_CODE[1] = conditionCodeData[1].getCODE();
		CONDITION_CODE[2] = conditionCodeData[2].getCODE();
		CONDITION_CODE[3] = conditionCodeData[3].getCODE();
		
		inputs.setCONDITION_CODE(CONDITION_CODE);
		
		CONDITION_TEXT[0] = conditionCodeData[0].getDESCRIPTION();
		CONDITION_TEXT[1] = conditionCodeData[1].getDESCRIPTION();
		CONDITION_TEXT[2] = conditionCodeData[2].getDESCRIPTION();
		CONDITION_TEXT[3] = conditionCodeData[3].getDESCRIPTION();
		
		inputs.setCONDITION_TEXT(CONDITION_TEXT);
		
	}
	
	
}