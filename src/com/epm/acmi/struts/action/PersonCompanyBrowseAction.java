/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;

import java.io.IOException;
import java.rmi.RemoteException;

import javax.servlet.ServletException;
import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.CookieUtil;
import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;
import com.cc.framework.ui.control.ControlActionContext;
import com.cc.framework.ui.control.SimpleListControl;
import com.epm.acmi.datamodel.PersonCompanyBrowseDisplayList;
import com.epm.acmi.struts.Constants;
import com.isdiary.entirex.WSPersonCompanyBrowse;

/** 
 * MyEclipse Struts
 * Creation date: 04-10-2008
 * 
 * XDoclet definition:
 * @struts.action path="/iuauser/personCompanyBrowse" name="personCompanyBrowseForm" input="/jsp/ias/PersonCompanyBrowseMain.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary.do" redirect="true"
 */
public class PersonCompanyBrowseAction extends CCAction {

	private static Logger log = Logger.getLogger(PersonCompanyBrowseAction.class);
	private static String classAction = "Person Company Browse Data";
	String comingFrom;
	
	public void doExecute(ActionContext ctx) throws IOException, ServletException {
		log.debug("Begin execute doExecute");
		this.loadList(ctx);	
		log.debug("End execute doExecute");
	}

	private void loadList(ActionContext ctx)  {
		
		String service = "Display: " + classAction;
		
		String PolicyNo = null;
		String START_PERSON_ID = null;
		String MORE_REC = null;
		comingFrom = null;
		
		PolicyNo  = (String)ctx.request().getParameter("policyno");
		log.debug("requset policyno:" + PolicyNo);
		
		if (PolicyNo == null) 
		{
			PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
			log.debug("session policyno:" + PolicyNo);
		}
		
		comingFrom  = (String)ctx.request().getParameter("comingFrom");
		
		PersonCompanyBrowseDisplayList dspData;
		try {
			dspData = WSPersonCompanyBrowse.fetch(PolicyNo, START_PERSON_ID, MORE_REC);
			SimpleListControl personCompanyBrowse = new SimpleListControl();
			personCompanyBrowse.setDataModel(dspData);
			ctx.session().setAttribute("personCompanyList", personCompanyBrowse);
			ctx.request().setAttribute("PC_START_PERSON_ID", START_PERSON_ID);
			ctx.request().setAttribute("PC_MORE_REC", MORE_REC);
			ctx.forwardToInput();
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();;
			return;
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		
		log.debug("placed Person Company Browse session");
	}
	
	/**
	* This Method is called when the Drilldown-Column is clicked
	* In our Example we switch to the DetailView, which shows
	* more Information about the User. It's a readonly View.
	* @param ctx ControlActionContext
	* @param key UniqueKey, as it was defined in the UserDisplayList
	* to identify the Row. In this Example the UserId.
	*/
	public void browsePersons_onDrilldown(ControlActionContext ctx, String key) {
		
		
		if (comingFrom != null)
		{
			if (comingFrom.equalsIgnoreCase("EP"))
			{
				ctx.forwardToAction("/iuauser/eventPortamedic?personid="+key);
			}
			
			if (comingFrom.equalsIgnoreCase("FT"))
			{
				ctx.forwardToAction("/iuauser/freeText?personid="+key);
			}
		}
	}
	
	public void more_onClick (FormActionContext ctx) {
		
			this.loadList(ctx);
		
	}
	
	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		// in this example we go back to the jsp
		ctx.forwardByName(Forwards.BACK);
	}
	
}