/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;

import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.acmi.common.TextProcessing;
import com.cc.acmi.common.TextProcessing.reponsePhone;
import com.cc.acmi.common.TextProcessing.reponseZipCode;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;
import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.EventPortamedicForm;
import com.isdiary.entirex.WSEventPortRequest;
import com.isdiary.entirex.WSGetPersonDataCall;


import com.softwarag.extirex.webservice.eventportrequest.client.MUPRTMWINOUT_PARMS;
import com.softwarag.extirex.webservice.eventportrequest.client.holders.MUPRTMWResponseINOUT_PARMS1Holder;
import com.softwarag.extirex.webservice.eventportrequest.client.holders.MUPRTMWResponseMSG_INFOHolder;
import com.softwarag.extirex.webservice.getpersondata.client.ACPCYMW1IN_PARMS;
import com.softwarag.extirex.webservice.getpersondata.client.holders.ACPCYMW1ResponseMSG_INFOHolder;
import com.softwarag.extirex.webservice.getpersondata.client.holders.ACPCYMW1ResponseOUT_PARMSHolder;

/** 
 * MyEclipse Struts
 * Creation date: 04-02-2008
 * 
 * XDoclet definition:
 * @struts.action path="/eventPortamedic" name="eventPortamedicForm" input="/jsp/ias/eventPortamedicMain.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iasuser/iasdiary.do" redirect="true"
 */
public class EventPortamedicAction extends CCAction  {

	private static Logger log = Logger.getLogger(EventPortamedicAction.class);
	private static String classAction = "Event Portamedic Request Data";
	
	public void doExecute(ActionContext ctx) throws Exception 
	{
		
		log.debug("Begin execute doExecute");
		String action = (String)ctx.request().getParameter("action");
		
		String EventId = null; 
		EventId = (String)ctx.request().getParameter("eventid");
		
		String eventCode = (String)ctx.request().getParameter("eventcode"); // come from Standard Event Codes; saying create a new 
																			// event with this the Standard Event Code 

		String actiontype = (String)ctx.request().getParameter("actiontype");
		
		if (action.equalsIgnoreCase("display"))
		{
			displayEventPortRequest(ctx, EventId, "display");
			ctx.forwardToInput();
		}
			
		if (action.equalsIgnoreCase("edit"))
		{
			String personid = null;
			String person_name = null;
			String back = null;
			
			personid  = (String)ctx.request().getParameter("personid");
			person_name  = (String)ctx.request().getParameter("person_name");//come from Browse Policy Certificate Person Help
			back = (String)ctx.request().getParameter("back"); //come from Memo Id Codes Help with back
			
			if ((personid != null) && (person_name!=null))
			{
				this.fillinPerson_id(ctx, personid, person_name);
				ctx.forwardToInput();
				return;
			}
			
			if (EventId != null) //event id is there; then edit with event 
			{
				editEventPortamedicRequest(ctx);
				
				if ((personid != null) && (person_name!=null))
				{
					this.fillinPerson_id(ctx, personid, person_name);
					return;
				}
				ctx.forwardToInput();
			}
			
			if(back != null)
			{
				ctx.forwardToInput();
			}
			
			if(actiontype != null)
			{
				if (actiontype.equalsIgnoreCase("create"))
				{
					createEventPortamedicMaint(ctx, eventCode);
					ctx.forwardToInput();
				}
			}
				
		}	
		
		log.debug("End execute doExecute");
	}
	
	
	private void createEventPortamedicMaint(ActionContext ctx, String eventCode) {
		
		log.debug("Prepopulate" + classAction +  ".....");
		
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		String policyNo = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		form.clear();
		
		form.setPolicyno(policyNo );
		
		if (eventCode != null)
		{
		  form.setStd_event(eventCode);
		  form.setRequest_type(eventCode);
		}
		form.setStatus("O");
		form.setEvent_id("");
		form.setLog_counter("0");
		
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date date = new Date();
	    form.setRequested(dateFormat.format(date).toString());
	    //String keyInsuredId = (String)ctx.session().getAttribute(Constants.IASkeyInsuredId);;
		//form.setPerson_id(keyInsuredId);
	    //String keyinsured = (String)ctx.session().getAttribute(Constants.IASkeyInsured);;
		//form.setPerson_name(keyinsured);
	    
	    String remarksTextArea = "Please advise agent prior to setting up appointment.";
	    form.setRemarksTextArea(remarksTextArea);
		log.debug("Finish .....prepopulating " + classAction +  ".....");		
		
	}


	private void editEventPortamedicRequest(ActionContext ctx) {
		
		String eventid = null;
		eventid = (String)ctx.request().getParameter("eventid");
		
		if ((eventid == null) || (eventid.trim().length()== 0) || eventid.equalsIgnoreCase("null")) 
		{
			log.debug("Event Id is Null");
			return;
		}
		else
			displayEventPortRequest(ctx, eventid, "edit");
		
	}

	private void retrieveForm(MUPRTMWINOUT_PARMS inputs,ActionContext ctx) 
	{
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		String eventid = null;		
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		inputs.setUSER_ID(user);
		
		//=============System Information =======================
		
		inputs.setEVENT_STATUS_CURRENT(form.getStatus());
		inputs.setPOLICY_ID(new BigDecimal(form.getPolicyno()));
		
		if (form.getRespn_date().length() == 0)
			inputs.setDATE_COMPLETED_YYYYMMDD(new BigDecimal("0"));
		else
			inputs.setDATE_COMPLETED_YYYYMMDD(new BigDecimal(TextProcessing.YYYYMMDDFormat(form.getRespn_date())));
		
		inputs.setRESPONSE_INDICATOR(form.getResponse());
		inputs.setSTD_EVENT_ID(form.getStd_event());
		
		if (form.getEvent_id().trim().length() == 0) 
			eventid = "0"; 	
		else
			eventid = form.getEvent_id().toString();
		
		inputs.setEVENT_ID(new BigDecimal(eventid));
		inputs.setDATE_CREATED(TextProcessing.YYYYMMDDFormat(form.getRequested()));
		inputs.setLOG_COUNTER(new BigDecimal(form.getLog_counter()));
		
		//=============General Information =======================
		
		inputs.setEQUIF_SUBJECT_PERSON_ID(new BigDecimal(form.getPerson_id()));
		inputs.setSUBJECT_PERSON_SEARCH_NAME(form.getPerson_name());
		inputs.setBIRTH_DATE_YYYYMMDD(new BigDecimal(TextProcessing.YYYYMMDDFormat(form.getBirthdate())));
		inputs.setMIB_BIRTH_PLACE(form.getBirthplace());
		
		if (form.getAge().trim().length() == 0) 
			inputs.setAGE(new BigDecimal("0"));
		else
			inputs.setAGE(new BigDecimal(form.getAge()) );
		
		inputs.setSEX(form.getSex());
		inputs.setMARITAL_STATUS(form.getMarital());
		inputs.setDRIVERS_LICENCE_ID(form.getDrivers_license());
		inputs.setDRIVER_LICENCE_STATE(form.getDrivers_license_state());
		inputs.setSOCIAL_SECURITY_NUMBER(TextProcessing.SSSSSSSSSFormat(form.getSsn()));
		inputs.setEMPLOYER(form.getEmployer());
		inputs.setOCCUPATION(form.getOcc());
		
		if (form.getStart().trim().length() == 0) 
			inputs.setEMP_START_DATE_YY_MM(new BigDecimal("0")); 	
		else
			inputs.setEMP_START_DATE_YY_MM(new BigDecimal(form.getStart()));
		
		
		//=============Phyician Information =======================
		inputs.setDOC_FIRST_NAME(form.getFirst_name());
		inputs.setDOC_MIDDLE_NAME(form.getMiddle_name());
		
		inputs.setHOSPDOC_NAME(form.getLast_name());
		inputs.setHOSPDOC_ADDR_STREET_NAME(form.getAddress_name());
		inputs.setHOSPDOC_ADDR_STREET_NUMBER(form.getAddress_number());
		inputs.setHOSPDOC_ADDR_CITY(form.getCity());
		inputs.setHOSPDOC_ADDR_STATE(form.getPhyician_state());
		
		
		
		TextProcessing physicianZipCode = new TextProcessing();
		reponseZipCode zipCode = physicianZipCode.new reponseZipCode(form.getPhyician_zipCode());
		
		inputs.setHOSPDOC_ADDR_ZIP_4(zipCode.getFour());
		inputs.setHOSPDOC_ADDR_ZIP_5(zipCode.getFive());
		
		inputs.setHOSPDOC_PHONE_EXTENSION(form.getPhyician_phone_extentsion());
		
		TextProcessing physicianFax = new TextProcessing();
		reponsePhone fax = physicianFax.new reponsePhone(form.getPhyician_fax_number());
			
		inputs.setHOSPDOC_FAX_AREA(fax.getArea());
		inputs.setHOSPDOC_FAX_EXCHANGE(fax.getExchange());
		inputs.setHOSPDOC_FAX_NUMBER(fax.getNumber());
		
		TextProcessing physicianPhone = new TextProcessing();
		reponsePhone phone = physicianPhone.new reponsePhone(form.getPhyician_phone_number());
		
		inputs.setHOSPDOC_PHONE_AREA(phone.getArea());
		inputs.setHOSPDOC_PHONE_EXCHANGE(phone.getExchange());
		inputs.setHOSPDOC_PHONE_NUMBER(phone.getNumber());
		
		inputs.setEQUIF_REQUEST_TYPE(form.getRequest());
		
		String[] Text = new String[5];
		TextProcessing.storeTextData(form.getRemarksTextArea(), 0, 4, Text , 61, 0, 300);
		
		inputs.setATTENTION_TEXT(Text);

	}


	private void displayEventPortRequest(ActionContext ctx, String EventId, String page) {

		//String PolicyNo = (String)ctx.request().getParameter("policyno");
		String service = "Display: Event Portamedic";
		
		String PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		if (EventId == null) 
		{
			log.debug("Event Id is Null");
			ctx.addGlobalError(DiaryMessages.EVENT_ID_NULL,PolicyNo,service);
			ctx.forwardByName(Forwards.BACK);
		}
		
		MUPRTMWResponseINOUT_PARMS1Holder inoutparms = new MUPRTMWResponseINOUT_PARMS1Holder();
		MUPRTMWResponseMSG_INFOHolder msgInfo = new MUPRTMWResponseMSG_INFOHolder(); 
		
	
		try {
			WSEventPortRequest.fetch(PolicyNo, EventId, inoutparms, msgInfo);
			fillForm(inoutparms, ctx);
			
			if(page.equalsIgnoreCase("display"))
			{	
				ctx.session().setAttribute(Constants.IASModify, "display");
			}
			else
			{
				if (form.getStatus().equalsIgnoreCase("O"))
				{
					ctx.session().setAttribute(Constants.IASModify, "editWithStatus");
				}
				else
				{
					ctx.session().setAttribute(Constants.IASModify, "edit");
				}
			}
					
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, e.getClass().getName(), e.getCause(),PolicyNo);
			ctx.forwardToInput();
			return;
		}
	
	}


	private void fillForm(MUPRTMWResponseINOUT_PARMS1Holder inoutparms, ActionContext ctx)  
	{
		
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		StringBuffer phone_number =  new StringBuffer();
		StringBuffer fax_number =  new StringBuffer();
		StringBuffer zipCode = new StringBuffer();
		
		//=============System Information =======================
		form.setStatus(inoutparms.value.getEVENT_STATUS_CURRENT1());
		form.setPolicyno(inoutparms.value.getPOLICY_ID1().toString());
		form.setRespn_date(TextProcessing.dateFormat(inoutparms.value.getDATE_COMPLETED_YYYYMMDD1().toString()));
		form.setResponse(inoutparms.value.getRESPONSE_INDICATOR1());
		form.setStd_event(inoutparms.value.getSTD_EVENT_ID1());
		form.setEvent_id(inoutparms.value.getEVENT_ID1().toString());
		form.setRequested(TextProcessing.dateFormat(inoutparms.value.getDATE_CREATED1()));
		form.setLog_counter(inoutparms.value.getLOG_COUNTER1().toString());
		
		//=============General Information =======================
		
		form.setPerson_id(inoutparms.value.getEQUIF_SUBJECT_PERSON_ID1().toString());
		form.setPerson_name(inoutparms.value.getSUBJECT_PERSON_SEARCH_NAME1());
		form.setBirthdate(TextProcessing.dateFormat(inoutparms.value.getBIRTH_DATE_YYYYMMDD1().toString()));
		form.setBirthplace(inoutparms.value.getMIB_BIRTH_PLACE1());
		form.setAge(inoutparms.value.getAGE1().toString());
		form.setSex(inoutparms.value.getSEX1());
		form.setMarital(inoutparms.value.getMARITAL_STATUS1());
		form.setDrivers_license(inoutparms.value.getDRIVERS_LICENCE_ID1());
		form.setDrivers_license_state(inoutparms.value.getDRIVER_LICENCE_STATE1());
		form.setSsn(TextProcessing.formatSSN((inoutparms.value.getSOCIAL_SECURITY_NUMBER1())));
		form.setEmployer(inoutparms.value.getEMPLOYER1()); 
		form.setOcc(inoutparms.value.getOCCUPATION1());
		form.setStart(inoutparms.value.getEMP_START_DATE_YY_MM1().toString());

		//=============Phyician Information =======================
		form.setFirst_name(inoutparms.value.getDOC_FIRST_NAME1());
		form.setMiddle_name(inoutparms.value.getDOC_MIDDLE_NAME1());
		form.setLast_name(inoutparms.value.getHOSPDOC_NAME1());
		form.setAddress_name(inoutparms.value.getHOSPDOC_ADDR_STREET_NAME1());
		form.setAddress_number(inoutparms.value.getHOSPDOC_ADDR_STREET_NUMBER1());
		form.setCity(inoutparms.value.getHOSPDOC_ADDR_CITY1());
		form.setPhyician_state(inoutparms.value.getHOSPDOC_ADDR_STATE1());
		form.setPhyician_phone_extentsion(inoutparms.value.getHOSPDOC_PHONE_EXTENSION1());
		
		
		if (inoutparms.value.getHOSPDOC_ADDR_ZIP_51().length() != 0)
		{
			zipCode.append(inoutparms.value.getHOSPDOC_ADDR_ZIP_51());
			
			if (inoutparms.value.getHOSPDOC_ADDR_ZIP_41().length() != 0)
			{
				zipCode.append("-").append(inoutparms.value.getHOSPDOC_ADDR_ZIP_41());	
			}
		}
		else
		{
			zipCode.append("");
		}
		
		form.setPhyician_zipCode(zipCode.toString());
		
		
		if (inoutparms.value.getHOSPDOC_PHONE_NUMBER1().length() != 0)
		{
			phone_number.append("(").append(inoutparms.value.getHOSPDOC_PHONE_AREA1()).append(") ").append(inoutparms.value.getHOSPDOC_PHONE_EXCHANGE1()).append("-").append(inoutparms.value.getHOSPDOC_PHONE_NUMBER1()) ;
			form.setPhyician_phone_number(phone_number.toString());
		}
		else
			form.setPhyician_phone_number("");
		
		if (inoutparms.value.getHOSPDOC_FAX_NUMBER1().length() != 0)
		{
			fax_number.append("(").append(inoutparms.value.getHOSPDOC_FAX_AREA1()).append(") ").append(inoutparms.value.getHOSPDOC_FAX_EXCHANGE1()).append("-").append(inoutparms.value.getHOSPDOC_FAX_NUMBER1()) ;
			form.setPhyician_fax_number(fax_number.toString());
		}
		else
			form.setPhyician_fax_number("");
		

		form.setRemarksTextArea(TextProcessing.formatText(inoutparms.value.getATTENTION_TEXT1(), 60));
		
		//=============Hospitial information - inoutparms =======================
		
	}


	public void fillinPerson_id(ActionContext ctx, String personid, String person_name)
	{
		EventPortamedicForm form = (EventPortamedicForm)ctx.form();
		form.setPerson_id(personid);
		form.setPerson_name(person_name);
		
		ACPCYMW1IN_PARMS inputs = new ACPCYMW1IN_PARMS();

		ACPCYMW1ResponseOUT_PARMSHolder outparms = new ACPCYMW1ResponseOUT_PARMSHolder();
		ACPCYMW1ResponseMSG_INFOHolder msginfo = new ACPCYMW1ResponseMSG_INFOHolder();
		
		inputs.setPERSON_ID(new BigDecimal(personid));
		
		String service = "Get Person Data";
		
		try {
			WSGetPersonDataCall.fetch(inputs, msginfo, outparms);
			fillGerneralInfo(ctx, outparms);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Person Id " + personid);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION_PERSON_ID, service + " WS",personid);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Person Id " + personid);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION_PERSON_ID,service + " WS",personid);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Person Id " + personid);			
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION_PERSON_ID, e.getClass().getName(), e.getCause(),personid);
			ctx.forwardToInput();
			return;
		}
		
	}
	
	private void fillGerneralInfo(ActionContext ctx, ACPCYMW1ResponseOUT_PARMSHolder outparms) 
	{
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		form.setBirthdate(TextProcessing.dateFormat(outparms.value.getBIRTH_DATE_YYYYMMDD().toString()));
		form.setBirthplace(outparms.value.getMIB_BIRTH_PLACE());
		form.setAge(outparms.value.getAGE().toString());
		form.setSex(outparms.value.getSEX());
		form.setMarital(outparms.value.getMARITAL_STATUS());
		form.setDrivers_license(outparms.value.getDRIVERS_LICENCE_ID());
		form.setDrivers_license_state(outparms.value.getDRIVER_LICENCE_STATE());
		form.setSsn(TextProcessing.formatSSN(outparms.value.getSOCIAL_SECURITY_NUMBER()));
		form.setEmployer(outparms.value.getEMPLOYER());
		form.setOcc(outparms.value.getOCCUPATION());
		form.setStart("");
	}


	public void recipientHelp_onClick(FormActionContext ctx) throws Exception 
	{
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
			
		form.save();
				 
		ctx.forwardByName("personidHelp", "EP", form.getEvent_id());
	}
	
	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void save_onClick(FormActionContext ctx) throws Exception {
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		form.validateForm(ctx);
	
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		addEventPortmedicMaint(ctx);
	}
	
	
	private void addEventPortmedicMaint(FormActionContext ctx) {
		String service = "Add: " + classAction;
		
		log.debug("Adding " + classAction);
		
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		String PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		MUPRTMWINOUT_PARMS inputs = new MUPRTMWINOUT_PARMS();
		
		retrieveForm( inputs, ctx);
		
		MUPRTMWResponseINOUT_PARMS1Holder inoutparms = new MUPRTMWResponseINOUT_PARMS1Holder();
		MUPRTMWResponseMSG_INFOHolder msgInfo = new MUPRTMWResponseMSG_INFOHolder(); 
		
		try {
			WSEventPortRequest.add(inputs, inoutparms, msgInfo);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);	
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
			ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....adding " + classAction);
		}
	}


	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void edit_onClick(FormActionContext ctx) throws Exception {
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		form.validateForm(ctx);
	
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		editEventPortmedicMaint(ctx);
		
	}
	
	private void editEventPortmedicMaint(FormActionContext ctx) 
	{
		String service = "Edit: " + classAction;
		
		log.debug("Editing " + classAction);
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		String PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		MUPRTMWINOUT_PARMS inputs = new MUPRTMWINOUT_PARMS();
	
		retrieveEditForm( inputs, ctx);
		
		MUPRTMWResponseINOUT_PARMS1Holder inoutparms = new MUPRTMWResponseINOUT_PARMS1Holder();
		MUPRTMWResponseMSG_INFOHolder msgInfo = new MUPRTMWResponseMSG_INFOHolder(); 
		
		try {
			WSEventPortRequest.edit(inputs, inoutparms, msgInfo);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if (msgInfo.value != null)
		{
			if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
			{
				log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
				ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
				ctx.forwardToInput();
				log.debug("Error occurred " + classAction);
			}
			else
			{
				log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
				ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
				String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
				ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
				ctx.forwardByName(Forwards.BACK);
				form.clear();	
				log.debug("Finish....editing " + classAction);
			}
		}
	}


	private void retrieveEditForm(MUPRTMWINOUT_PARMS inputs, FormActionContext ctx) 
	{
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		String eventid = null;		
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		inputs.setUSER_ID(user);
		
		//=============System Information =======================
		
		inputs.setEVENT_STATUS_CURRENT(form.getStatus());
		inputs.setPOLICY_ID(new BigDecimal(form.getPolicyno()));
		inputs.setDATE_COMPLETED_YYYYMMDD(new BigDecimal(TextProcessing.YYYYMMDDFormat(form.getRespn_date())));
		inputs.setRESPONSE_INDICATOR(form.getResponse());
		inputs.setSTD_EVENT_ID(form.getStd_event());
		
		if (form.getEvent_id().trim().length() == 0) 
			eventid = "0"; 	
		else
			eventid = form.getEvent_id().toString();
		
		inputs.setEVENT_ID(new BigDecimal(eventid));
		inputs.setDATE_CREATED(TextProcessing.YYYYMMDDFormat(form.getRequested()));
		inputs.setLOG_COUNTER(new BigDecimal(form.getLog_counter()));
		
		//=============General Information =======================
		
		inputs.setEQUIF_SUBJECT_PERSON_ID(new BigDecimal(form.getPerson_id()));
		inputs.setSUBJECT_PERSON_SEARCH_NAME(form.getPerson_name());
		inputs.setBIRTH_DATE_YYYYMMDD(new BigDecimal(TextProcessing.YYYYMMDDFormat(form.getBirthdate())));
		inputs.setMIB_BIRTH_PLACE(form.getBirthplace());
		
		if (form.getAge().trim().length() == 0) 
			inputs.setAGE(new BigDecimal("0"));
		else
			inputs.setAGE(new BigDecimal(form.getAge()) );
		
		inputs.setSEX(form.getSex());
		inputs.setMARITAL_STATUS(form.getMarital());
		inputs.setDRIVERS_LICENCE_ID(form.getDrivers_license());
		inputs.setDRIVER_LICENCE_STATE(form.getDrivers_license_state());
		inputs.setSOCIAL_SECURITY_NUMBER(TextProcessing.SSSSSSSSSFormat(form.getSsn()));
		inputs.setEMPLOYER(form.getEmployer());
		inputs.setOCCUPATION(form.getOcc());
		
		if (form.getStart().trim().length() == 0) 
			inputs.setEMP_START_DATE_YY_MM(new BigDecimal("0")); 	
		else
			inputs.setEMP_START_DATE_YY_MM(new BigDecimal(form.getStart()));
		
		
		//=============Phyician Information =======================
		inputs.setDOC_FIRST_NAME(form.getFirst_name());
		inputs.setDOC_MIDDLE_NAME(form.getMiddle_name());
		
		inputs.setHOSPDOC_NAME(form.getLast_name());
		inputs.setHOSPDOC_ADDR_STREET_NAME(form.getAddress_name());
		inputs.setHOSPDOC_ADDR_STREET_NUMBER(form.getAddress_number());
		inputs.setHOSPDOC_ADDR_CITY(form.getCity());
		inputs.setHOSPDOC_ADDR_STATE(form.getPhyician_state());
		
		
		
		TextProcessing physicianZipCode = new TextProcessing();
		reponseZipCode zipCode = physicianZipCode.new reponseZipCode(form.getPhyician_zipCode());
		
		inputs.setHOSPDOC_ADDR_ZIP_4(zipCode.getFour());
		inputs.setHOSPDOC_ADDR_ZIP_5(zipCode.getFive());
		
		inputs.setHOSPDOC_PHONE_EXTENSION(form.getPhyician_phone_extentsion());
		
		TextProcessing physicianFax = new TextProcessing();
		reponsePhone fax = physicianFax.new reponsePhone(form.getPhyician_fax_number());
			
		inputs.setHOSPDOC_FAX_AREA(fax.getArea());
		inputs.setHOSPDOC_FAX_EXCHANGE(fax.getExchange());
		inputs.setHOSPDOC_FAX_NUMBER(fax.getNumber());
		
		TextProcessing physicianPhone = new TextProcessing();
		reponsePhone phone = physicianPhone.new reponsePhone(form.getPhyician_phone_number());
		
		inputs.setHOSPDOC_PHONE_AREA(phone.getArea());
		inputs.setHOSPDOC_PHONE_EXCHANGE(phone.getExchange());
		inputs.setHOSPDOC_PHONE_NUMBER(phone.getNumber());
		
		inputs.setEQUIF_REQUEST_TYPE(form.getRequest());
		
		String[] Text = new String[5];
		TextProcessing.storeTextData(form.getRemarksTextArea(), 0, 4, Text , 61, 0, 300);
		
		inputs.setATTENTION_TEXT(Text);
	}


	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		EventPortamedicForm form = (EventPortamedicForm) ctx.form();
		
		String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
		ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
		
		form.clear();
		ctx.forwardByName(Forwards.BACK);
	}
}