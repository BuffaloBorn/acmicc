/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;

import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TreeMap;

import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;


import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.acmi.common.TextProcessing;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;

import com.cc.framework.ui.control.ControlActionContext;
import com.cc.framework.ui.control.SimpleListControl;
import com.epm.acmi.bean.PolicyPersonMainBean;
import com.epm.acmi.datamodel.PolicyPersonMainDisplayList;
import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.PolicyPersonMainForm;
import com.isdiary.entirex.WSPersonCompanyMaintCall;
import com.isdiary.entirex.WSPolicyPersonMainListCall;
import com.isdiary.entirex.WSPolicyPersonMaint2Call;

import com.softwarag.extirex.webservice.personcompanymaint.client.holders.ACPCYMWResponseMSG_INFOHolder;
import com.softwarag.extirex.webservice.policypersonmainlist.client.holders.ACCPEBWResponseINOUT_PARM1Holder;
import com.softwarag.extirex.webservice.policypersonmainlist.client.holders.ACCPEBWResponseMSG_INFOHolder;
import com.softwarag.extirex.webservice.policypersonmainlist.client.holders.ACCPEBWResponseOUT_PARMHolder;
import com.softwarag.extirex.webservice.policypersonmaint2.client.ACCPEMW1IN_PARM;
import com.softwarag.extirex.webservice.policypersonmaint2.client.holders.ACCPEMW1ResponseIN_PARM1Holder;
import com.softwarag.extirex.webservice.policypersonmaint2.client.holders.ACCPEMW1ResponseMSG_INFOHolder;



/** 
 * MyEclipse Struts
 * Creation date: 04-03-2008
 * 
 * XDoclet definition:
 * @struts.action path="/policyPersonMain" name="policyPersonMainForm" input="/jsp/ias/policyPersonMainMain.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary.do" redirect="true"
 */
public class PolicyPersonMainAction extends CCAction {

	private static Logger log = Logger.getLogger(PolicyPersonMainAction.class);
	private static String classAction = "Policy Person Maintance Data";
	
	public void doExecute(ActionContext ctx) throws Exception 
	{
		//String input = (String) ctx.request().getParameter("input");
		
		log.debug("Begin execute doExecute");
		this.loadList(ctx);
		// Display the Page with the UserList
		log.debug("End execute doExecute");
	}
	
	
	private void loadList(ActionContext ctx) 
	{
		
		String service = "Display: " + classAction;
		
		String PolicyNo = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		log.debug("Policy Number from IASpolicyNumber:" + PolicyNo);
		
		
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		ACCPEBWResponseMSG_INFOHolder msgInfo = new ACCPEBWResponseMSG_INFOHolder();
		ACCPEBWResponseINOUT_PARM1Holder inoutparms =  new ACCPEBWResponseINOUT_PARM1Holder();
		ACCPEBWResponseOUT_PARMHolder outparms = new ACCPEBWResponseOUT_PARMHolder();
		
		try {
			PolicyPersonMainDisplayList dspData = WSPolicyPersonMainListCall.fetch(PolicyNo,  msgInfo,inoutparms, outparms, ctx);
			SimpleListControl policyPeasonList = new SimpleListControl();
			policyPeasonList.setDataModel(dspData);
			ctx.session().setAttribute("policyPeasonList", policyPeasonList);
			form.getPolicyPersonList().setDataModel(dspData);
			loadForm(ctx,inoutparms, outparms  );
			ctx.forwardToInput();
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
	}

	public void policyPeasonList_onCoverage(ControlActionContext ctx, String key)
	{
		
		PolicyPersonMainDisplayList list = (PolicyPersonMainDisplayList)ctx.control().getDataModel();
		PolicyPersonMainBean row = list.returnRowAt(key);
		
		displayPolicyCoverageMainList(row, ctx);
	}


	private void displayPolicyCoverageMainList(PolicyPersonMainBean row,ControlActionContext ctx) {
		
		String IASModify = (String)ctx.session().getAttribute(Constants.IASModify);
		ctx.session().setAttribute(Constants.IASDiaryModify,IASModify);
		
		
		if (IASModify.equalsIgnoreCase("display"))
			ctx.forwardByName("coverageDisplay", row.getPERSON_ID());
		else
			ctx.forwardByName("coverageEdit", row.getPERSON_ID());
		
	}


	public void policyPeasonList_onRiderOpen(ControlActionContext ctx, String key)
	{
		/*ListControl policyPeasonList = (ListControl)ctx.control();
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		PolicyPersonMainListDsp dceDisplay = (PolicyPersonMainListDsp) policyPeasonList.getRowFromKey(key);*/
		
		PolicyPersonMainDisplayList list = (PolicyPersonMainDisplayList)ctx.control().getDataModel();
		PolicyPersonMainBean row = list.returnRowAt(key);
		
		list.beginCheckRiderStatus(key);
		
		displayRiderMainList(row, ctx);
	}
	
	
	public void policyPeasonList_onDrilldown(ControlActionContext ctx, String key)
	{
		/*ListControl policyPeasonList = (ListControl)ctx.control();
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		PolicyPersonMainListDsp dceDisplay = (PolicyPersonMainListDsp) policyPeasonList.getRowFromKey(key);*/
			
		PolicyPersonMainDisplayList list = (PolicyPersonMainDisplayList)ctx.control().getDataModel();
		PolicyPersonMainBean row = list.returnRowAt(key);
		
		if (row.getRIDER_SHOW().trim().length() == 0 )
		{
			return;
		}

		if (row.getRIDER_SHOW().equalsIgnoreCase("Create"))
		{
			createRiderMainList(row, ctx);
		}
		
		if (row.getRIDER_SHOW().equalsIgnoreCase("Open"))
		{
			displayRiderMainList(row, ctx);

		}
		

		//createRiderMainList(row, ctx);
	}
	
	public void policyPeasonList_onRiderCreate(ControlActionContext ctx, String key)
	{
		/*ListControl policyPeasonList = (ListControl)ctx.control();
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		PolicyPersonMainListDsp dceDisplay = (PolicyPersonMainListDsp) policyPeasonList.getRowFromKey(key);*/
		
		PolicyPersonMainDisplayList list = (PolicyPersonMainDisplayList)ctx.control().getDataModel();
		PolicyPersonMainBean row = list.returnRowAt(key);

		list.beginCheckRiderStatus(key);	

		createRiderMainList(row, ctx);
	}
	

	private void displayRiderMainList(PolicyPersonMainBean row,	ControlActionContext ctx) 
	{			
		

		if(row.getPERSON_STATUS_IND().equalsIgnoreCase("d"))
		{
			ctx.addGlobalError(DiaryMessages.UI_EDIT_MSG, "Cannot add rider when person is declined.");
			log.debug("Person has been declined, so rider access " + classAction);
			ctx.forwardToInput();
			return;
		}
		
		String IASModify = (String)ctx.session().getAttribute(Constants.IASModify);
		ctx.session().setAttribute(Constants.IASDiaryModify,IASModify);
		
		if (IASModify.equalsIgnoreCase("display"))
			ctx.forwardByName("riderDisplay", row.getPERSON_ID(), row.getPERSON_STATUS(), TextProcessing.MMDDYYYYFormat(row.getPERSON_STATUS_START_DATE()));
		else
			ctx.forwardByName("riderEdit", row.getPERSON_ID(), row.getPERSON_STATUS(), TextProcessing.MMDDYYYYFormat(row.getPERSON_STATUS_START_DATE()));
			
	}
	
	private void createRiderMainList(PolicyPersonMainBean row,	ControlActionContext ctx) 
	{
		
		
		if(row.getPERSON_STATUS_IND().equalsIgnoreCase("d"))
		{
			ctx.addGlobalError(DiaryMessages.UI_EDIT_MSG, "Cannot add rider when person is declined.");
			log.debug("Person has been declined, so rider access " + classAction);
			ctx.forwardToInput();
			return;
		}
		
		String IASModify = (String)ctx.session().getAttribute(Constants.IASModify);
		ctx.session().setAttribute(Constants.IASDiaryModify,IASModify);
		ctx.session().setAttribute(Constants.IASModify, "create");
		
		ctx.forwardByName("riderCreate", row.getPERSON_ID(), row.getPERSON_STATUS(), TextProcessing.MMDDYYYYFormat(row.getPERSON_STATUS_START_DATE()));
	}


	private void loadForm(ActionContext ctx,ACCPEBWResponseINOUT_PARM1Holder inoutparms,ACCPEBWResponseOUT_PARMHolder outparms) 
	{
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		
		if (inoutparms.value.getSTART_PERSON_ID1().toString().equalsIgnoreCase("0") )
		{
			form.setPersonid("");
		}
		else
			form.setPersonid(inoutparms.value.getSTART_PERSON_ID1().toString());
		
		form.setPolicyid( inoutparms.value.getPOLICY_ID1().toString());
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		
		Date date = new Date();
	    form.setEffective_date(dateFormat.format(date).toString());
	
	}


	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	/*public void save_onClick(FormActionContext ctx) throws Exception
	{
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		addPolicyPersonMaint(ctx);
		
	}*/

	

	/*private void addPolicyPersonMaint(FormActionContext ctx) 
	{
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		
		DataModel dataModel = form.getPolicyPersonList().getDataModel();
		
		try {
			ListHelp.iterateNodes((ListDataModel) dataModel, dirtyRowIterator);
			if((Person_Status_Ind.equalsIgnoreCase("D")) && (Person_Status_Ind.length()!= 0))
			{
				ctx.forwardByName("conditionCodes");
			}

		} catch (Exception e) {
			String service = "addPolicyPersonMaint";
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" method call: " + service);
			String PolicyNo = "00";
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo );
			ctx.forwardByName("back");
			return;
		}
		
		
	}*/

	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		
		ctx.forwardByName(Forwards.BACK);
	}
	
	/*private Algorithm dirtyRowIterator = new Algorithm() {

		*//**
		 * @see com.cc.framework.common.Algorithm#execute(java.lang.String, java.lang.Object)
	 	 *//*
		public boolean execute(String uniqueId, Object obj) {
			
			// check if the object implements the dirtymarker interface
			if (!(obj instanceof DirtyMarker)) {
				// stop iteration
				return false;
			}
			
			PolicyPersonMainBean row = (PolicyPersonMainBean) obj;
			
			if (row.isDirty()) {
				saveDirtyRow(row);
			}
			
			// continue iteration
			return true;
		}
	};*/
	
	/**
	 * Saves a dirty row
	 * @param row	A row bean
	
	protected void saveDirtyRow(PolicyPersonMainBean row) {

		try {
			if (row.getPERSON_STATUS_IND().equalsIgnoreCase("D"))
			{
				Person_Status_Ind = row.getPERSON_STATUS_IND();
			}
			
			row.resetDirty();
			
			log.debug("Policy Person Main List "  +  row.getPERSON_ID() + " saved...");
			
		} catch (Throwable t) {
			log.error(t);
		}
	} */
	
	/**
	 * This Method is called when a Edit-Icon is clicked
	 *  
	 * @param	ctx		ControlActionContext
	 * @param	key 	UniqueKey, as it was created in the Datamodel (e.g. the Primarykey)
	 */
	public void onEdit(ControlActionContext ctx, String key) throws Exception {

		PolicyPersonMainDisplayList list = (PolicyPersonMainDisplayList)ctx.control().getDataModel();
		
		list.beginnEdit(key);
		
		ctx.forwardToInput();
	}
	
	/**
	 * This Method is called when a Cancel-Icon is clicked
	 *  
	 * @param	ctx		ControlActionContext
	 * @param	key 	UniqueKey, as it was created in the Datamodel (e.g. the Primarykey)
	 */
	public void onCancel(ControlActionContext ctx, String key) throws Exception {

		PolicyPersonMainDisplayList list = (PolicyPersonMainDisplayList)ctx.control().getDataModel();
		list.cancelEdit();

		ctx.forwardToInput();
	}
	
	/**
	 * This Method is called when a Save-Icon is clicked
	 *  
	 * @param	ctx		ControlActionContext
	 * @param	key 	UniqueKey, as it was created in the Datamodel (e.g. the Primarykey)
	 */
	public void onSave(ControlActionContext ctx, String key) throws Exception {

//		Any modifications to person type, person status ind not equal to 'D' calls Policy    
//		Person Maint 2 to get a response message only.  
//
//		Modifications to person status ind equal to 'D' calls Policy Person Maint 1, which will return data to populate the policy condition codes page.  
//
//		Modifications to smoker ind should call Person Company Maint with action 'M', Person ID and Smokey Ind. (Smoker Ind will be returned but only the message is required)
//		
		
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		PolicyPersonMainDisplayList list = (PolicyPersonMainDisplayList)ctx.control().getDataModel();
		PolicyPersonMainBean row = list.applyEditReturnRow();
		

		if (row.isDirty())
		{
			
			if (row.isSmokerStatus())
			{
				updateSmokerStatus(ctx, row.getSMOKER_IND(), row.getPERSON_ID());
				row.resetSmokerStatusMarker();
			}
			
			//row.isPersonStatusInd() && row.getPERSON_STATUS_IND().equalsIgnoreCase("D")
			if(row.getPERSON_STATUS_IND().equalsIgnoreCase("D"))
			{
				goToConditionCodesWithDeclince(ctx, row.getPERSON_ID(), form.getPolicyid());
			}
			
			//if (row.getPERSON_STATUS_IND().equalsIgnoreCase(" ") || (!row.getPERSON_STATUS_IND().equalsIgnoreCase("D")))
			if((row.isPolicyPersonTypeCurrentMarker())&& (!row.getPERSON_STATUS_IND().equalsIgnoreCase("D")))
			{
				saveRowWithOutDeclince(row, ctx);
			}
			
			row.resetPersonStatusIndMarker();
			row.resetPolicyPersonTypeCurrentMarker();
		}	
	}


	private void updateSmokerStatus(ControlActionContext ctx, String smoker_ind, String person_id) 
	{
		String service = "Update: " + classAction + " PersonCompanyMaint:Smoker Status";
		
		log.debug(service);
		
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		
		String PolicyNo = form.getPolicyid();
		
		ACPCYMWResponseMSG_INFOHolder msgInfo = new ACPCYMWResponseMSG_INFOHolder();
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		try {
			WSPersonCompanyMaintCall.update(person_id,smoker_ind,user, msgInfo);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
	
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			log.debug("Finish....updating " + service);
			log.debug("Finish....updating " + classAction);
		}
	}


	private void saveRowWithOutDeclince(PolicyPersonMainBean row, ControlActionContext ctx) 
	{
		String service = "Add: " + classAction + " PolicyPersonMaint2";
		
		log.debug("Adding " + classAction + " PolicyPersonMaint2" );
		 
		PolicyPersonMainForm  form = (PolicyPersonMainForm ) ctx.form();
		
		String PolicyNo = form.getPolicyid(); 
		
		ACCPEMW1IN_PARM action = new ACCPEMW1IN_PARM();
		
		action.setPERSON_ID(new BigDecimal(row.getPERSON_ID()));
		
		action.setPOLICY_ID(new BigDecimal(PolicyNo));
		
		action.setPERSON_STATUS_IND(row.getPERSON_STATUS_IND());
		
		String[] POLICY_PERSON_TYPE_CURRENT = new String[5];
		
		TreeMap status = new TreeMap();
		status.put(" ", " ");
		status.put("*", "*");
		status.put("I", "I");
		status.put("K", "K");
		status.put("N", "N");
		status.put("O", "R");
		status.put("P", "P");
		status.put("T", "T");
		status.put("W", "W");
		status.put("Z", "Z");

		
		//POLICY_PERSON_TYPE_CURRENT[0] = row.getTone();
		//POLICY_PERSON_TYPE_CURRENT[1] = row.getTtwo();
		//POLICY_PERSON_TYPE_CURRENT[2] = row.getTthree();
		//POLICY_PERSON_TYPE_CURRENT[3] = row.getTfour();
		//POLICY_PERSON_TYPE_CURRENT[4] = row.getTfive();
		
		if (status.containsKey(row.getTone()))
			POLICY_PERSON_TYPE_CURRENT[0] = row.getTone();
	     else
	    	 POLICY_PERSON_TYPE_CURRENT[0] = "";
		
		if (status.containsKey(row.getTtwo()))
			POLICY_PERSON_TYPE_CURRENT[1] = row.getTtwo();
	     else
	    	 POLICY_PERSON_TYPE_CURRENT[1] = "";
		
		if (status.containsKey(row.getTthree()))
			POLICY_PERSON_TYPE_CURRENT[2] = row.getTthree();
	     else
	    	 POLICY_PERSON_TYPE_CURRENT[2] = "";
		
		if (status.containsKey(row.getTfour()))
			POLICY_PERSON_TYPE_CURRENT[3] = row.getTfour();
	     else
	    	 POLICY_PERSON_TYPE_CURRENT[3] = "";
		
		if (status.containsKey(row.getTfive()))
			POLICY_PERSON_TYPE_CURRENT[4] = row.getTfive();
	     else
	    	 POLICY_PERSON_TYPE_CURRENT[4] = "";
		
		
		action.setPOLICY_PERSON_TYPE_CURRENT(POLICY_PERSON_TYPE_CURRENT);
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		action.setUSER_ID(user);
		
		
		ACCPEMW1ResponseIN_PARM1Holder inparms = new ACCPEMW1ResponseIN_PARM1Holder();
		ACCPEMW1ResponseMSG_INFOHolder msgInfo = new ACCPEMW1ResponseMSG_INFOHolder();
		
		try {	
			WSPolicyPersonMaint2Call.update(action, inparms, msgInfo);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.forwardByName("policyPersonMainEdit");
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMESSAGE_TEXT()));
			this.loadList(ctx);
			//form.clear();	
			log.debug("Finish....adding " + classAction);
		}
		
	}


	private void goToConditionCodesWithDeclince(ControlActionContext ctx, String personid, String policyid) 
	{
		ctx.forwardByName("conditionCodes",personid, policyid);
	}
}