/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;

import java.math.BigDecimal;
import java.rmi.RemoteException;

import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.acmi.common.TextProcessing;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;
import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.AmendmentMainForm;
import com.isdiary.entirex.WSAmendMaintCall;
import com.softwarag.extirex.webservice.amendmaint.client.MUAMNMWINOUT_PARMS;
import com.softwarag.extirex.webservice.amendmaint.client.holders.MUAMNMWResponseINOUT_PARMS1Holder;
import com.softwarag.extirex.webservice.amendmaint.client.holders.MUAMNMWResponseMSG_DATAHolder;
import com.softwarag.extirex.webservice.amendmaint.client.holders.MUAMNMWResponseOUT_PARMSHolder;

/** 
 * MyEclipse Struts
 * Creation date: 04-03-2008
 * 
 * XDoclet definition:
 * @struts.action path="/amendmentMain" name="amendmentMainForm" input="/jsp/isa/amendmentMainMain.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary.do" redirect="true"
 */
public class AmendmentMainAction extends CCAction {
	
	private static Logger log = Logger.getLogger(AmendmentMainAction.class);
	private static String classAction = "Amendment Main Data";

	public void doExecute(ActionContext ctx) throws Exception {
		log.debug("Begin execute doExecute");
		displayAmendment(ctx);
		log.debug("End execute doExecute");
		
	}
	
	private void displayAmendment(ActionContext ctx) {
		String PolicyNo = null;
		String service = "Amendment Maintainance";
		
		PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		log.debug("requset policyno:" + PolicyNo);
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		MUAMNMWResponseINOUT_PARMS1Holder inoutparms = new MUAMNMWResponseINOUT_PARMS1Holder();
		MUAMNMWResponseOUT_PARMSHolder outparms = new MUAMNMWResponseOUT_PARMSHolder();
		MUAMNMWResponseMSG_DATAHolder msgInfo = new MUAMNMWResponseMSG_DATAHolder();
		
		try {
			WSAmendMaintCall.fetch(user, PolicyNo, inoutparms, outparms, msgInfo);
			fillForm(ctx, inoutparms,  outparms);
			ctx.forwardToInput();
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardByName(Forwards.BACK);
			log.debug("Error occurred " + classAction);
		}
		
		
	}

	private void fillForm(ActionContext ctx,MUAMNMWResponseINOUT_PARMS1Holder inoutparms,MUAMNMWResponseOUT_PARMSHolder outparms) throws Exception 
	{
		
		
		AmendmentMainForm form = (AmendmentMainForm) ctx.form();
		
		form.setPolicyid(inoutparms.value.getPOLICY_ID1().toString());
		form.setDescription(inoutparms.value.getDESCRIPTION1());
		
		
		form.setName( outparms.value.getKEY_INSURED_SEARCH_NAME());
		
		
		if(inoutparms.value.getPROXY_IND1().equalsIgnoreCase("X"))
		{
			
		 form.setWrong_app("0");	
		}
		
		if(inoutparms.value.getTRUST_IND1().equalsIgnoreCase("X"))
		{
			
			form.setWrong_app("1");	
		}
		
		form.setAmendmentTextArea(TextProcessing.formatText(inoutparms.value.getTEXT1(), 60));
		
	}

	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		AmendmentMainForm form = (AmendmentMainForm) ctx.form();
		form.clear();
		
		String modify = (String) ctx.session().getAttribute("modify");
		 
		if(modify != null)
		  ctx.request().setAttribute("modify", modify);	
		
		ctx.forwardByName(Forwards.BACK);
	}
	
	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void edit_onClick(FormActionContext ctx) throws Exception 
	{
		AmendmentMainForm form = (AmendmentMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		editAmendementMaint(ctx);

	}
	
	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void save_onClick(FormActionContext ctx) throws Exception 
	{
		AmendmentMainForm form = (AmendmentMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		saveAmendementMaint(ctx);

	}

	private void saveAmendementMaint(FormActionContext ctx)
	{
		String service = "Add: " + classAction;
		
		
		AmendmentMainForm form = (AmendmentMainForm) ctx.form();
		
		MUAMNMWResponseINOUT_PARMS1Holder inoutparms = new MUAMNMWResponseINOUT_PARMS1Holder();
		MUAMNMWResponseOUT_PARMSHolder outparms = new MUAMNMWResponseOUT_PARMSHolder();
		MUAMNMWResponseMSG_DATAHolder msgInfo = new MUAMNMWResponseMSG_DATAHolder();
		
		MUAMNMWINOUT_PARMS inputs = new MUAMNMWINOUT_PARMS();
		
		
		String  PolicyNo =  null;
		
		retrieveEditForm( inputs, PolicyNo ,  ctx);
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		try {
			WSAmendMaintCall.add(user, inputs, inoutparms, outparms, msgInfo);

		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return; 
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Adding " + classAction);
		}
		
		
	}

	private void editAmendementMaint(FormActionContext ctx) 
	{
		String service = "Edit: " + classAction;
		
		
		AmendmentMainForm form = (AmendmentMainForm) ctx.form();
		
		MUAMNMWResponseINOUT_PARMS1Holder inoutparms = new MUAMNMWResponseINOUT_PARMS1Holder();
		MUAMNMWResponseOUT_PARMSHolder outparms = new MUAMNMWResponseOUT_PARMSHolder();
		MUAMNMWResponseMSG_DATAHolder msgInfo = new MUAMNMWResponseMSG_DATAHolder();
		
		MUAMNMWINOUT_PARMS inputs = new MUAMNMWINOUT_PARMS();
		
		
		String  PolicyNo =  null;
		
		retrieveEditForm( inputs, PolicyNo ,  ctx);
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		try {
			WSAmendMaintCall.edit(user, inputs, inoutparms, outparms, msgInfo);

		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return; 
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Editing " + classAction);
		}
		
		
	}

	private void retrieveEditForm(MUAMNMWINOUT_PARMS inputs, String policyNo,FormActionContext ctx) 
	{
		AmendmentMainForm form = (AmendmentMainForm) ctx.form();
		
		policyNo = form.getPolicyid();
		
		inputs.setPOLICY_ID(new BigDecimal(policyNo ));
		inputs.setDESCRIPTION(form.getDescription());
		
	
				
		if (form.getWrong_app().equalsIgnoreCase("0"))
			inputs.setPROXY_IND("X");					
		else
			inputs.setPROXY_IND(new String(""));
		
		if (form.getWrong_app().equalsIgnoreCase("1"))
			inputs.setTRUST_IND("X");
		else
			inputs.setTRUST_IND(new String(""));

	
		String[] Text = new String[191];
		TextProcessing.storeTextData(form.getAmendmentTextArea(), 0, 190, Text , 61, 0, 14350);
		inputs.setTEXT(Text );
		
	}
	
	
}