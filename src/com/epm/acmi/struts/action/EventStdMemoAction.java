/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;

import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.acmi.common.TextProcessing;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;
import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.EventStdMemoForm;
import com.epm.acmi.util.ACMICache;
import com.isdiary.entirex.WSEventStdMemoCall;
import com.isdiary.entirex.WSMemoTextCall;

import com.softwarag.extirex.webservice.evtstdmemomaint.client.MUESMMWINOUT_PARMS;
import com.softwarag.extirex.webservice.evtstdmemomaint.client.holders.MUESMMWResponseINOUT_PARMS1Holder;
import com.softwarag.extirex.webservice.evtstdmemomaint.client.holders.MUESMMWResponseMSG_DATAHolder;
import com.softwarag.extirex.webservice.evtstdmemomaint.client.holders.MUESMMWResponseOUT_PARMSHolder;
import com.softwarag.extirex.webservice.memotext.client.holders.MUMEMMWResponseMSG_DATAHolder;
import com.softwarag.extirex.webservice.memotext.client.holders.MUMEMMWResponseOUT_PARMHolder;

/** 
 * MyEclipse Struts
 * Creation date: 04-01-2008
 * 
 * XDoclet definition:
 * @struts.action path="/iuauser/eventStdMemo" name="eventStdMemoForm" input="/jsp/ias/EventStdMemo.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary" redirect="true"
 */
public class EventStdMemoAction extends CCAction {

	private static Logger log = Logger.getLogger(EventStdMemoAction.class);
	private static String classAction = "Event Standard Memo Maintance Data";
	
	public void doExecute(ActionContext ctx) throws Exception {
		log.debug("Begin execute doExecute");
		String action = (String)ctx.request().getParameter("action");
		String back = null;
		String EventId = null; 
		EventId = (String)ctx.request().getParameter("eventid"); // come from Policy Diary Screen; saying this event has event id already
		
		String eventCode = (String)ctx.request().getParameter("eventcode"); // come from Standard Event Codes; saying create a new 
																			// event with this the Standard Event Code
		
		if (action.equalsIgnoreCase("display"))
		{
			displayEventStdMemoMaint(ctx, EventId, "display");
			ctx.forwardToInput();
		}
		
		if (action.equalsIgnoreCase("edit"))
		{
		
			String personid = null;
			String person_name = null;
			
			personid  = (String)ctx.request().getParameter("personid"); //come from Browse Policy Certificate Person Help 
			person_name  = (String)ctx.request().getParameter("person_name");//come from Browse Policy Certificate Person Help
			back = (String)ctx.request().getParameter("back"); //come from Memo Id Codes Help with back
			
			if ((personid != null) && (person_name!=null))
			{
				this.fillinPerson_id(ctx, personid, person_name);
				ctx.forwardToInput();
				return;
			}
			
			if (EventId != null) //event id is there; then edit with event 
			{
				editDisplayEventStdMemoMaint(ctx);
				ctx.forwardToInput();
			}
			else //create
			{
				if (back == null)
				{
					createEventStdMemoMaint(ctx, eventCode);
				}
				ctx.forwardToInput();
			}
		}

		log.debug("End execute doExecute");
	}
	

	private void createEventStdMemoMaint(ActionContext ctx, String eventCode) {
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		String eventcode = (String)ctx.request().getParameter("eventcode");
		String policyNo = (String)ctx.session().getAttribute(Constants.IASpolicyNumber); 
		String freeformind = (String)ctx.session().getAttribute("form_id");
		
		form.clear();
		
		form.setPolicyno(policyNo );
		form.setStd_event(eventcode);
		form.setStatus("O");
		form.setAttachment("Y");
		form.setLog_counter("0");
		SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
		Date date = new Date();
	    form.setRequested(dateFormat.format(date).toString());
	    String keyInsuredId = (String)ctx.session().getAttribute(Constants.IASkeyInsuredId);;
		form.setRecipient_id(keyInsuredId);
	    String keyinsured = (String)ctx.session().getAttribute(Constants.IASkeyInsured);;
		form.setRecipient_name(keyinsured);
		form.setEvent_id("");
		form.setApplication_formid(freeformind);
		fillinMemo_id(ctx, eventCode);
	}

	

	private void displayEventStdMemoMaint(ActionContext ctx, String EventId, String page) {
		String service = "Event Standard Memo";
		String PolicyNo = (String)ctx.request().getParameter("policyno");
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		if (PolicyNo == null) 
		{
			PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
			
		}
		
		if (EventId == null) 
		{
			log.debug("Event Id is Null");
			ctx.addGlobalError(DiaryMessages.EVENT_ID_NULL,PolicyNo,"Free Text");
			ctx.forwardByName("back");
			return;
		}
		
		MUESMMWResponseMSG_DATAHolder msgInfo = new MUESMMWResponseMSG_DATAHolder();
		MUESMMWResponseINOUT_PARMS1Holder inoutparms = new MUESMMWResponseINOUT_PARMS1Holder();
		MUESMMWResponseOUT_PARMSHolder outparms = new MUESMMWResponseOUT_PARMSHolder();
		
		try {
			WSEventStdMemoCall.fetch(PolicyNo,EventId,inoutparms, msgInfo, outparms);
			fillForm(inoutparms,outparms, ctx);
			
			if(page.equalsIgnoreCase("display"))
			{
				ctx.session().setAttribute(Constants.IASModify, "display");
			}
			else
			{
				if (form.getStatus().equalsIgnoreCase("O"))
				{
					
					ctx.session().setAttribute(Constants.IASModify, "editWithStatus");
				}
				else
				{
					
					ctx.session().setAttribute(Constants.IASModify, "edit");
				}
			}
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		
	}

	private void editDisplayEventStdMemoMaint(ActionContext ctx) 
	{
		
		String eventid = null;
		eventid = (String)ctx.request().getParameter("eventid");
		
		displayEventStdMemoMaint(ctx, eventid, "edit");
	}
	
	private void fillForm(MUESMMWResponseINOUT_PARMS1Holder inoutparms, MUESMMWResponseOUT_PARMSHolder outparms, ActionContext ctx) throws Exception 
	{
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		form.setPolicyno(inoutparms.value.getPOLICY_ID1().toString());
		form.setEvent_id(inoutparms.value.getEVENT_ID1().toString());
		form.setStd_event(inoutparms.value.getSTD_EVENT_ID1());
		form.setDescription(outparms.value.getSTD_MEMO_DESCRIPTION());
		form.setAttachment(outparms.value.getATTACHMENT_IND());
		form.setRecipient_id(inoutparms.value.getRECIPIENT_PERSON_ID1().toString());
		form.setRecipient_name(TextProcessing.recipientFormat(inoutparms.value.getRECIPIENT_SEARCH_NAME1()));
		form.setMemoid(outparms.value.getMEMO_ID());
		form.setStatus(inoutparms.value.getEVENT_STATUS_CURRENT1());
		form.setRequested(TextProcessing.dateFormat(outparms.value.getDATE_CREATED().toString()));
		form.setRespn_date(TextProcessing.dateFormat(inoutparms.value.getDATE_COMPLETED_YYYYMMDD1().toString()));
		form.setSecond_request(inoutparms.value.getSECOND_REQUEST_IND1());
		form.setApplication_formid(outparms.value.getAPPLICATION_FORM_ID());
		//form.setFreeformind(outparms.value.get));	
		form.setStdletterTextArea(TextProcessing.formatTextStdEventMemo(outparms.value.getTEXT(), 75));
		form.setLog_counter(inoutparms.value.getLOG_COUNTER1().toString());
	
	}

	private void fillinMemo_id(ActionContext ctx, String memoid) 
	{
		
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		form.setMemoid(memoid);
		
		String PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		String service = "Memo Text";
		
		MUMEMMWResponseOUT_PARMHolder outparms = new MUMEMMWResponseOUT_PARMHolder();
		MUMEMMWResponseMSG_DATAHolder msgInfo = new MUMEMMWResponseMSG_DATAHolder();
		
		form.setDescription((String) ACMICache.getStdEventCodesDescription().get(memoid));
		
		try {
			WSMemoTextCall.fetch(memoid, msgInfo, outparms);
			form.setStdletterTextArea(TextProcessing.formatTextStdEventMemo(outparms.value.getTEXT(), 75));
			
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service  +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
	}
	
	private void fillinPerson_id(ActionContext ctx, String personid, String person_name) 
	{
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		form.setRecipient_id(personid);
		form.setRecipient_name(person_name);	
	}
	
	
	

	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void save_onClick(FormActionContext ctx) throws Exception {
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		form.validateForm(ctx);
	
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		addEventStdMemoMaint(ctx);
	}
	
	private void addEventStdMemoMaint(FormActionContext ctx) 
	{
		String service = "Add: " + classAction;
		
		log.debug("Adding Free Text Maint");
		
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		String PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		MUESMMWINOUT_PARMS inputs = new MUESMMWINOUT_PARMS();
		
		retrieveForm( inputs, PolicyNo ,  ctx);
		
		MUESMMWResponseMSG_DATAHolder msgInfo = new MUESMMWResponseMSG_DATAHolder();
		MUESMMWResponseINOUT_PARMS1Holder inoutparms = new MUESMMWResponseINOUT_PARMS1Holder();
		MUESMMWResponseOUT_PARMSHolder outparms = new MUESMMWResponseOUT_PARMSHolder();
		
		try {
			WSEventStdMemoCall.add(inputs, inoutparms, msgInfo, outparms);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
			ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Adding " + classAction);
		}
		
	}


	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void edit_onClick(FormActionContext ctx) throws Exception {
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		form.validateForm(ctx);
	
		if (ctx.hasErrors())
		{		
			ctx.forwardToInput();
			 return;
		}
		
		editEventStdMemoMaint(ctx);
	}
	
	
	private void editEventStdMemoMaint(FormActionContext ctx) 
	{
		String service = "Edit: " + classAction;
		
		log.debug("Editing Event Standard Memo Maint");
	
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();

	
		String PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		MUESMMWINOUT_PARMS inputs = new MUESMMWINOUT_PARMS();
		
		retrieveForm( inputs, PolicyNo ,  ctx);
		
		MUESMMWResponseMSG_DATAHolder msgInfo = new MUESMMWResponseMSG_DATAHolder();
		MUESMMWResponseINOUT_PARMS1Holder inoutparms = new MUESMMWResponseINOUT_PARMS1Holder();
		MUESMMWResponseOUT_PARMSHolder outparms = new MUESMMWResponseOUT_PARMSHolder();
		
		
		try {
			WSEventStdMemoCall.edit(inputs, inoutparms, msgInfo, outparms);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
			ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Editing " + classAction);
		}
		
	}


	private void retrieveForm(MUESMMWINOUT_PARMS inputs, String policyNo, FormActionContext ctx) 
	{
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		inputs.setUSER_ID(user);
		inputs.setLOG_COUNTER(new BigDecimal(form.getLog_counter()));
		inputs.setPOLICY_ID(new BigDecimal(form.getPolicyno()));
		if (form.getEvent_id().trim().length() == 0) 
			inputs.setEVENT_ID(new BigDecimal("0"));
		else
			inputs.setEVENT_ID(new BigDecimal(form.getEvent_id()));
		inputs.setSTD_EVENT_ID(form.getStd_event());	
//		form.setDescription(outparms.value.getSTD_MEMO_DESCRIPTION());
//		form.setAttachment(outparms.value.getATTACHMENT_IND());
		inputs.setRECIPIENT_PERSON_ID(new BigDecimal(form.getRecipient_id()));
		inputs.setRECIPIENT_SEARCH_NAME(form.getRecipient_name());
//		form.setMemoid(outparms.value.getMEMO_ID());
		inputs.setEVENT_STATUS_CURRENT(form.getStatus());
//		form.setRequested(TextProcessing.dateFormat(inoutparms.value.getDATE_COMPLETED_YYYYMMDD1().toString()));
		if (form.getRespn_date().length() == 0)
			inputs.setDATE_COMPLETED_YYYYMMDD(new BigDecimal("0"));
		else
			inputs.setDATE_COMPLETED_YYYYMMDD(new BigDecimal(TextProcessing.YYYYMMDDFormat(form.getRespn_date())));
		inputs.setSECOND_REQUEST_IND(form.getSecond_request());
//		form.setApplication_formid(outparms.value.getAPPLICATION_FORM_ID());
		//form.setFreeformind(outparms.value.get));	
//		form.setStdletterTextArea(TextProcessing.formatTextStdEventMemo(outparms.value.getTEXT(), 75));
	}


	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		
		// in this example we go back to the jsp
		form.clear();
		
		String IASDiaryModify = (String)ctx.session().getAttribute(Constants.IASDiaryModify);
		ctx.session().setAttribute(Constants.IASModify,IASDiaryModify);

		ctx.forwardByName(Forwards.BACK);
		
	}
	
	public void recipientHelp_onClick(FormActionContext ctx) throws Exception {
		
		EventStdMemoForm form = (EventStdMemoForm) ctx.form();
		form.save();
		
		ctx.forwardByName("recipientHelp", "ESM", form.getEvent_id());
		
	}
	
}