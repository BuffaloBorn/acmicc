/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.epm.acmi.struts.action;

import java.math.BigDecimal;
import java.rmi.RemoteException;

import javax.servlet.http.Cookie;
import javax.xml.rpc.ServiceException;

import org.apache.log4j.Logger;

import com.cc.acmi.common.DiaryMessages;
import com.cc.acmi.common.Forwards;
import com.cc.acmi.common.TextProcessing;
import com.cc.framework.adapter.struts.ActionContext;
import com.cc.framework.adapter.struts.FormActionContext;

import com.epm.acmi.struts.Constants;
import com.epm.acmi.struts.form.UnderwritingNotesMainForm;
import com.isdiary.entirex.WSUnderwNotesMaintCall;
import com.softwarag.extirex.webservice.underwnotesmaint.client.MUNOTMWINOUT_PARMS;
import com.softwarag.extirex.webservice.underwnotesmaint.client.holders.MUNOTMWResponseINOUT_PARMS1Holder;
import com.softwarag.extirex.webservice.underwnotesmaint.client.holders.MUNOTMWResponseMSG_DATAHolder;
import com.softwarag.extirex.webservice.underwnotesmaint.client.holders.MUNOTMWResponseOUT_PARMSHolder;

/** 
 * MyEclipse Struts
 * Creation date: 04-07-2008
 * 
 * XDoclet definition:
 * @struts.action path="/underwritingNotesMain" name="underwritingNotesMainForm" input="/jsp/ias/underwritingNotesMainMain.jsp" scope="request" validate="true"
 * @struts.action-forward name="back" path="/iuauser/iasdiary.do" redirect="true"
 */
public class UnderwritingNotesMainAction extends CCAction {

	private static Logger log = Logger.getLogger(UnderwritingNotesMainAction.class);
	private static String classAction = "Underwriting Notes Data";
	
	public void doExecute(ActionContext ctx) throws Exception {
		log.debug("Begin execute doExecute");
		displayUnderwritingNotesMaint(ctx);
		log.debug("End execute doExecute");
	}
	
	
	private void displayUnderwritingNotesMaint(ActionContext ctx) {
		String PolicyNo = null;
		String service = "Underwriting Notes Maintenance";
		
		
		PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		log.debug("requset policyno:" + PolicyNo);
		
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		MUNOTMWResponseMSG_DATAHolder msgInfo = new MUNOTMWResponseMSG_DATAHolder();
		MUNOTMWResponseINOUT_PARMS1Holder inoutparms = new MUNOTMWResponseINOUT_PARMS1Holder();
		MUNOTMWResponseOUT_PARMSHolder outparms = new MUNOTMWResponseOUT_PARMSHolder();
		
		
		try {
			WSUnderwNotesMaintCall.fetch(user, outparms, inoutparms, PolicyNo, msgInfo);
			fillForm(ctx, inoutparms,  outparms);
			ctx.forwardToInput();
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardByName(Forwards.BACK);
			log.debug("Error occurred " + classAction);
		}
	}


	private void fillForm(ActionContext ctx, MUNOTMWResponseINOUT_PARMS1Holder inoutparms,	MUNOTMWResponseOUT_PARMSHolder outparms) throws Exception 
	{		
		UnderwritingNotesMainForm form = (UnderwritingNotesMainForm) ctx.form();

		form.setPolicy_id(inoutparms.value.getPOLICY_ID1().toString());
		form.setDescription(inoutparms.value.getDESCRIPTION1());
		form.setNotesArea(TextProcessing.formatText(inoutparms.value.getTEXT1(), 60));
		form.setLog_counter(inoutparms.value.getLOG_COUNTER1().toString());
	}


	/**
	 * This method is called if the back button is clicked
	 * @param ctx The FormActionContext
	 */
	public void back_onClick(FormActionContext ctx) throws Exception {
		UnderwritingNotesMainForm form = (UnderwritingNotesMainForm) ctx.form();
		form.clear();
		ctx.forwardByName(Forwards.BACK);
	}
	
	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void edit_onClick(FormActionContext ctx) throws Exception 
	{
		
		UnderwritingNotesMainForm form = (UnderwritingNotesMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		editUnderwritingNotesMaint(ctx);
	
	}

	/**
	 * This method is called if the save button is clicked
	 * @param ctx The FormActionContext
	 */
	public void save_onClick(FormActionContext ctx) throws Exception 
	{
		
		UnderwritingNotesMainForm form = (UnderwritingNotesMainForm) ctx.form();
		
		form.validateForm(ctx);
		
		if (ctx.hasErrors())
		{
			ctx.forwardToInput();
			 return;
		}
		
		addUnderwritingNotesMaint(ctx);
	
	}
	

	private void addUnderwritingNotesMaint(FormActionContext ctx)
	{
		String service = "Add: " + classAction;
		UnderwritingNotesMainForm form = (UnderwritingNotesMainForm) ctx.form();
		
		String PolicyNo = null;
		PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		MUNOTMWResponseMSG_DATAHolder msgInfo = new MUNOTMWResponseMSG_DATAHolder();
		MUNOTMWResponseINOUT_PARMS1Holder inoutparms = new MUNOTMWResponseINOUT_PARMS1Holder();
		MUNOTMWResponseOUT_PARMSHolder outparms = new MUNOTMWResponseOUT_PARMSHolder();
		
		MUNOTMWINOUT_PARMS inputs = new MUNOTMWINOUT_PARMS();
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		retrieveEditForm( inputs, PolicyNo  ,  ctx);
		
		try {
			WSUnderwNotesMaintCall.add(user, inputs, outparms, inoutparms, msgInfo);
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Adding " + classAction);
		}
				
	}


	private void editUnderwritingNotesMaint(FormActionContext ctx) 
	{
		String service = "Edit: " + classAction;
		UnderwritingNotesMainForm form = (UnderwritingNotesMainForm) ctx.form();
		
		String PolicyNo = null;
		PolicyNo  = (String)ctx.session().getAttribute(Constants.IASpolicyNumber);
		
		MUNOTMWResponseMSG_DATAHolder msgInfo = new MUNOTMWResponseMSG_DATAHolder();
		MUNOTMWResponseINOUT_PARMS1Holder inoutparms = new MUNOTMWResponseINOUT_PARMS1Holder();
		MUNOTMWResponseOUT_PARMSHolder outparms = new MUNOTMWResponseOUT_PARMSHolder();
		
		MUNOTMWINOUT_PARMS inputs = new MUNOTMWINOUT_PARMS();
		
		retrieveEditForm( inputs, PolicyNo  ,  ctx);
		String user  = (String)ctx.session().getAttribute(Constants.IASuser);
		
		try {
			WSUnderwNotesMaintCall.edit(user, inputs, outparms, inoutparms, msgInfo);
     		
			Cookie[] cookies = ctx.request().getCookies();

		     for (int i = 0; i < cookies.length; i++) {
		            Cookie c = cookies[i];
		            String name = c.getName();
		            String value = c.getValue();
		           
		      		int expiry = 1*24*60*60;
		      		
		            if (name.equalsIgnoreCase("updateClose"))
					{
		            	if(value.equalsIgnoreCase("close")) 
		            	{
		            		Cookie cookie = new Cookie("iaspopup", "close");
		            		cookie.setPath("/acmicc/");
							cookie.setMaxAge(expiry);
							ctx.response().addCookie(cookie);
		            	}
					}
		        }
	
		} catch (RemoteException e) {
			log.error("Remote Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service +  " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.REMOTE_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (ServiceException e) {
			log.error("Service Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() +" Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.SERCIVE_EXCEPTION,service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
			
		} catch (Exception e) {
			log.error("Exception " + e.getClass().getName() + " caught with message: " + e.getMessage() + " Web Service: " + service + " and Policy Number " + PolicyNo);
			ctx.addGlobalError(DiaryMessages.FILL_IN_FORM_EXCEPTION, service + " WS",PolicyNo);
			ctx.forwardToInput();
			return;
		}
		
		if( msgInfo.value.getRETURN_CODE().equalsIgnoreCase("E"))
		{
			log.debug("Mainframe Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalError(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardToInput();
			log.debug("Error occurred " + classAction);
		}
		else
		{
			log.debug("Message: " + TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.addGlobalMessage(DiaryMessages.NATUAL_BUS_MSG, TextProcessing.formatMainFrameMessage(msgInfo.value.getMSG_TEXT()));
			ctx.forwardByName(Forwards.BACK);
			form.clear();	
			log.debug("Finish....Editing " + classAction);
		}
	}


	private void retrieveEditForm(MUNOTMWINOUT_PARMS inputs, String policyNo,FormActionContext ctx) 
	{
		UnderwritingNotesMainForm form = (UnderwritingNotesMainForm) ctx.form();

		policyNo = form.getPolicy_id();
		
		inputs.setDESCRIPTION(form.getDescription());
		inputs.setPOLICY_ID(new BigDecimal(policyNo));
		

		String[] Text = new String[191];
		TextProcessing.storeTextData(form.getNotesArea(), 0, 190, Text , 61, 0, 11460);
		inputs.setTEXT(Text );
		inputs.setLOG_COUNTER(new BigDecimal(form.getLog_counter()));
	}
}